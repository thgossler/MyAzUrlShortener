@using Microsoft.FluentUI.AspNetCore.Components
@using System.Globalization
@using System.Text
@using System.Text.RegularExpressions
@inject IJSRuntime JS

<div style="max-height: 600px; overflow-y: auto; padding-right: 10px;">
    <FluentStack Orientation="Orientation.Horizontal" Wrap="true">
        <FluentTextField @ref="_initialFocusControl" @bind-Value="MinuteInput" 
        Immediate="true" ImmediateDelay="350"
        Label="Minute" Placeholder="*/0-59"
        Style="width:60px; margin-right:10px;" 
        Error="@MinuteError" />

        <FluentTextField @bind-Value="HourInput" 
        Immediate="true" ImmediateDelay="350"
        Label="Hour" Placeholder="*/0-23"
        Style="width:60px;" 
        Error="@HourError" />

        <FluentTextField @bind-Value="DayOfMonthInput" 
        Immediate="true" ImmediateDelay="350"
        Label="Day of Month" Placeholder="*/1-31,..."
        Style="width:100px; margin-right:10px;" 
        Error="@DayOfMonthError" />

        <FluentTextField @bind-Value="MonthInput" 
        Immediate="true" ImmediateDelay="350"
        Label="Month" Placeholder="*/1-12,..."
        Style="width:100px; margin-right:10px;" 
        Error="@MonthError" />
    </FluentStack>

    <div class="section">
        <div style="margin-bottom: 5px">Day of Week:</div>
        <FluentCheckbox @bind-Value="Mon.Checked" Label="Mon" Style="margin-right:8px;" />
        <FluentCheckbox @bind-Value="Tue.Checked" Label="Tue" Style="margin-right:8px;" />
        <FluentCheckbox @bind-Value="Wed.Checked" Label="Wed" Style="margin-right:8px;" />
        <FluentCheckbox @bind-Value="Thu.Checked" Label="Thu" Style="margin-right:8px;" />
        <FluentCheckbox @bind-Value="Fri.Checked" Label="Fri" Style="margin-right:8px;" />
        <FluentCheckbox @bind-Value="Sat.Checked" Label="Sat" Style="margin-right:8px;" />
        <FluentCheckbox @bind-Value="Sun.Checked" Label="Sun" Style="margin-right:8px;" />
    </div>

    <div class="section" style="margin-top: 10px">
        <h4>Cron Expression</h4>
        <FluentStack Orientation="Orientation.Horizontal" VerticalAlignment="VerticalAlignment.Center" Wrap="true">
            <FluentTextField @bind-Value="CrontabExpression" 
            Immediate="true" ImmediateDelay="350"
            Style="width:250px; margin-right:10px;" Placeholder="* * * * *" 
            @onfocus="() => _cronExpressionHasFocus = true" 
            @onblur="() => _cronExpressionHasFocus = false" />
            <FluentButton OnClick="CopyToClipboard" Style="margin-right: 5px;">Copy</FluentButton>
            <FluentButton OnClick="GenerateRandom">Random</FluentButton>
        </FluentStack>
        <div id="description" style="margin-top:10px; font-style:italic; color:#555;">@Description</div>
    </div>

    <div class="section examples">
        <h4 style="margin-top: 15px">Presets</h4>
        <div style="display: flex; flex-wrap: wrap; gap: 8px;">
            @foreach (var preset in Presets)
            {
                <FluentButton OnClick="() => ApplyPreset(preset.State)">@preset.Label</FluentButton>
            }
        </div>
    </div>

    <FluentAccordion Style="margin-top: 20px;">
        <FluentAccordionItem Expanded="false">
            <HeadingTemplate>
                <FluentLabel Typo="Typography.H5" Color="Color.FillInverse">Calendar Preview</FluentLabel>
            </HeadingTemplate>
            <ChildContent>
                <div class="section calendar" style="display:grid; grid-template-columns:repeat(3,1fr); gap:10px;">
                    @foreach (var m in Enumerable.Range(1, 12))
                    {
                        <div class="month" style="border:1px solid #ccc; padding:5px; font-size:12px;">
                            <div class="month-name" style="text-align:center;font-weight:bold;">@CultureInfo.CurrentCulture.DateTimeFormat.GetAbbreviatedMonthName(m)</div>
                            <div class="days" style="display:grid; grid-template-columns:repeat(7,1fr);">
                                @foreach (var cell in BuildCalendarCells(Year, m, State))
                                {
                                    @if (cell.Day > 0)
                                    {
                                        <div class="day @(cell.Active?"active":"")"
                                        title="@cell.Tooltip"
                                        style="width:14px;height:14px;margin:1px;text-align:center;line-height:14px;cursor:pointer;@(cell.Active ? "background-color:var(--accent-fill-rest);color:white;border-radius:2px;" : "")">
                                            @cell.Day
                                        </div>
                                    }
                                    else
                                    {
                                        <div class="day" style="width:14px;height:14px;margin:1px;text-align:center;line-height:14px;"></div>
                                    }
                                }
                            </div>
                        </div>
                    }
                </div>
            </ChildContent>
        </FluentAccordionItem>
    </FluentAccordion>
</div>

@code {
    private int Year = DateTime.Now.Year;
    FluentTextField _initialFocusControl;

    private string _minute = "*";
    private string _minuteInput = "*";
    private string MinuteInput { get => _minuteInput; set { _minuteInput = value; ValidateAndSetMinute(value); } }
    private string Minute { get => _minute; set { _minute = value; SyncToUnifiedExpression(); } }
    private string MinuteError = null;

    private string _hour = "*";
    private string _hourInput = "*";
    private string HourInput { get => _hourInput; set { _hourInput = value; ValidateAndSetHour(value); } }
    private string Hour { get => _hour; set { _hour = value; SyncToUnifiedExpression(); } }
    private string HourError = null;

    private string _dayOfMonth = "*";
    private string _dayOfMonthInput = "*";
    private string DayOfMonthInput { get => _dayOfMonthInput; set { _dayOfMonthInput = value; ValidateAndSetDayOfMonth(value); } }
    private string DayOfMonth { get => _dayOfMonth; set { _dayOfMonth = value; SyncToUnifiedExpression(); } }
    private string DayOfMonthError = null;

    private string _month = "*";
    private string _monthInput = "*";
    private string MonthInput { get => _monthInput; set { _monthInput = value; ValidateAndSetMonth(value); } }
    private string Month { get => _month; set { _month = value; SyncToUnifiedExpression(); } }
    private string MonthError = null;

    // Individual weekday items
    private WeekDayItem Mon = new("Mon", DayOfWeek.Monday);
    private WeekDayItem Tue = new("Tue", DayOfWeek.Tuesday);
    private WeekDayItem Wed = new("Wed", DayOfWeek.Wednesday);
    private WeekDayItem Thu = new("Thu", DayOfWeek.Thursday);
    private WeekDayItem Fri = new("Fri", DayOfWeek.Friday);
    private WeekDayItem Sat = new("Sat", DayOfWeek.Saturday);
    private WeekDayItem Sun = new("Sun", DayOfWeek.Sunday);

    private string _crontabExpression = "* * * * *";
    public string CrontabExpression
    {
        get => _crontabExpression;
        set
        {
            _crontabExpression = value;
            if (value != null && value.Split(' ').Length == 5)
            {
                ParseUnifiedCronExpression();
            }
        }
    }

    private string Description = "";

    private bool _cronExpressionHasFocus = false;
    private bool _suppressCheckboxUpdate = false;

    private StateModel State => new()
    {
        Minute = string.IsNullOrWhiteSpace(Minute) ? "*" : Minute,
        Hour = string.IsNullOrWhiteSpace(Hour) ? "*" : Hour,
        Dom = string.IsNullOrWhiteSpace(DayOfMonth) ? "*" : DayOfMonth,
        Mon = string.IsNullOrWhiteSpace(Month) ? "*" : Month,
        Dow = GetCheckedDays()
    };

    private List<string> GetCheckedDays() => new List<string> {
        Mon.Checked ? ((int)Mon.Value).ToString() : null,
        Tue.Checked ? ((int)Tue.Value).ToString() : null,
        Wed.Checked ? ((int)Wed.Value).ToString() : null,
        Thu.Checked ? ((int)Thu.Value).ToString() : null,
        Fri.Checked ? ((int)Fri.Value).ToString() : null,
        Sat.Checked ? ((int)Sat.Value).ToString() : null,
        Sun.Checked ? ((int)Sun.Value).ToString() : null
    }.Where(x => x != null).ToList();

    private List<Preset> Presets = new()
    {
        new("Every Monday 9:00", new StateModel{Minute="0",Hour="9",Dow=new List<string>{((int)DayOfWeek.Monday).ToString()}}),
        new("First of Month 00:00", new StateModel{Minute="0",Hour="0",Dom="1"}),
        new("Wed & Fri 14:30", new StateModel{Minute="30",Hour="14",Dow=new List<string>{((int)DayOfWeek.Wednesday).ToString(),((int)DayOfWeek.Friday).ToString()}}),
        new("Every Weekend", new StateModel{Minute="0",Hour="0",Dow=new List<string>{((int)DayOfWeek.Saturday).ToString(),((int)DayOfWeek.Sunday).ToString()}}),
        new("Every day at midnight", new StateModel{Minute="0",Hour="0"}),
        new("Every day at 6:00", new StateModel{Minute="0",Hour="6"}),
        new("Weekdays at 9:00", new StateModel{Minute="0",Hour="9",Dow=Enumerable.Range((int)DayOfWeek.Monday,(int)DayOfWeek.Friday-(int)DayOfWeek.Monday+1).Select(i=>i.ToString()).ToList()}),
        new("Every Sunday at 00:00", new StateModel{Minute="0",Hour="0",Dow=new List<string>{((int)DayOfWeek.Sunday).ToString()}}),
        new("Every Friday at 18:00", new StateModel{Minute="0",Hour="18",Dow=new List<string>{((int)DayOfWeek.Friday).ToString()}}),
        new("1st of Month at 6:00", new StateModel{Minute="0",Hour="6",Dom="1"})
    };

    protected override void OnInitialized()
    {
        Mon.OnChanged = OnWeekDayChangedFromUI;
        Tue.OnChanged = OnWeekDayChangedFromUI;
        Wed.OnChanged = OnWeekDayChangedFromUI;
        Thu.OnChanged = OnWeekDayChangedFromUI;
        Fri.OnChanged = OnWeekDayChangedFromUI;
        Sat.OnChanged = OnWeekDayChangedFromUI;
        Sun.OnChanged = OnWeekDayChangedFromUI;
        UpdateAllFromState();
    }

    private void OnWeekDayChangedFromUI()
    {
        if (_suppressCheckboxUpdate)
            return;
        if (!_cronExpressionHasFocus)
        {
            UpdateAllFromState();
        }
    }

    private void UpdateAllFromState()
    {
        var minutePart = IsValidMinute(Minute) ? Minute : "*";
        var hourPart = IsValidHour(Hour) ? Hour : "*";
        var domPart = IsValidDayOfMonth(DayOfMonth) ? DayOfMonth : "*";
        var monthPart = IsValidMonth(Month) ? Month : "*";
        var dowPart = State.Dow.Any() ? string.Join(",", State.Dow) : "*";
        _crontabExpression = string.Join(" ", new[] { minutePart, hourPart, domPart, monthPart, dowPart });
        UpdateDescription();
        StateHasChanged();
    }

    private void SyncToUnifiedExpression()
    {
        UpdateAllFromState(); 
    }

    public async Task SetInitialInputFocusAsync()
    {
        await Task.Run(() => _initialFocusControl?.FocusAsync());
    }

    private void ParseUnifiedCronExpression()
    {
        var parts = CrontabExpression.Split(' ', StringSplitOptions.RemoveEmptyEntries);
        if (parts.Length >= 5)
        {
            // Validate all fields first
            bool validMinute = IsValidMinute(parts[0]);
            bool validHour = IsValidHour(parts[1]);
            bool validDom = IsValidDayOfMonth(parts[2]);
            bool validMonth = IsValidMonth(parts[3]);
            bool validDow = IsValidDayOfWeek(parts[4]);
            if (validMinute && validHour && validDom && validMonth && validDow)
            {
                // Check for duplicates in day of month and month
                if (HasDuplicateInList(parts[2]))
                {
                    DayOfMonthError = "Duplicate values are not allowed (e.g. 3,3)";
                    DayOfMonthInput = "*";
                }
                else
                {
                    DayOfMonthError = null;
                    DayOfMonthInput = parts[2];
                }
                if (HasDuplicateInList(parts[3]))
                {
                    MonthError = "Duplicate values are not allowed (e.g. 12,12)";
                    MonthInput = "*";
                }
                else
                {
                    MonthError = null;
                    MonthInput = parts[3];
                }
                MinuteInput = parts[0];
                HourInput = parts[1];
                // Update day of week checkboxes
                var allDays = new[] { Mon, Tue, Wed, Thu, Fri, Sat, Sun };
                _suppressCheckboxUpdate = true;
                try
                {
                    if (parts[4] != "*" && !string.IsNullOrWhiteSpace(parts[4]))
                    {
                        foreach (var day in allDays) day.Checked = false;
                        var dowValues = parts[4].Split(',');
                        foreach (var value in dowValues)
                        {
                            if (int.TryParse(value, out int dowValue))
                            {
                                var day = allDays.FirstOrDefault(d => (int)d.Value == dowValue);
                                if (day != null) day.Checked = true;
                            }
                        }
                    }
                    else
                    {
                        foreach (var day in allDays) day.Checked = false;
                    }
                }
                finally
                {
                    _suppressCheckboxUpdate = false;
                }
                UpdateAllFromState();
            }
            // else: do not update any field if any part is invalid
        }
    }

    public async Task InitializeWithCronExpression(string minutes, string hours, string daysOfMonth, string months, string daysOfWeek)
    {
        try
        {
            Minute = minutes;
            Hour = hours;
            DayOfMonth = daysOfMonth;
            Month = months;
            var allDays = new[] { Mon, Tue, Wed, Thu, Fri, Sat, Sun };
            if (daysOfWeek != "*")
            {
                foreach (var day in allDays) day.Checked = false;
                var dowValues = daysOfWeek.Split(',');
                foreach (var value in dowValues)
                {
                    if (int.TryParse(value, out int dowValue))
                    {
                        var day = allDays.FirstOrDefault(d => (int)d.Value == dowValue);
                        if (day != null) day.Checked = true;
                    }
                }
            }
            else
            {
                foreach (var day in allDays) day.Checked = false;
            }
            CrontabExpression = string.Join(" ", new[] { minutes, hours, daysOfMonth, months, daysOfWeek });
        }
        finally { }
        UpdateAllFromState();
        await SetInitialInputFocusAsync();
    }

    private void UpdateDescription()
    {
        var sb = new StringBuilder();
        string effectiveMinute = string.IsNullOrWhiteSpace(Minute) ? "*" : Minute;
        string effectiveHour = string.IsNullOrWhiteSpace(Hour) ? "*" : Hour;
        string effectiveDayOfMonth = string.IsNullOrWhiteSpace(DayOfMonth) ? "*" : DayOfMonth;
        string effectiveMonth = string.IsNullOrWhiteSpace(Month) ? "*" : Month;
        if (effectiveHour == "*" && effectiveMinute == "*")
        {
            sb.Append("Every minute");
        }
        else if (effectiveHour == "*")
        {
            sb.Append($"At {effectiveMinute} minutes past every hour");
        }
        else if (effectiveMinute == "*")
        {
            sb.Append($"Every minute of hour {effectiveHour}");
        }
        else
        {
            var hh = effectiveHour.PadLeft(2, '0');
            var mm = effectiveMinute.PadLeft(2, '0');
            sb.Append($"At {hh}:{mm}");
        }
        var scheduleComponents = new List<string>();
        var selected = new[] { Mon, Tue, Wed, Thu, Fri, Sat, Sun }.Where(d => d.Checked).Select(d => d.Name).ToList();
        if (selected.Any())
        {
            scheduleComponents.Add($"on {string.Join(" and ", selected)}");
        }
        if (effectiveDayOfMonth != "*")
        {
            scheduleComponents.Add($"on day {effectiveDayOfMonth} of the month");
        }
        if (effectiveMonth != "*")
        {
            if (effectiveMonth.Contains(",") || effectiveMonth.Contains("-"))
            {
                scheduleComponents.Add("in selected months");
            }
            else if (int.TryParse(effectiveMonth, out int monthNum))
            {
                scheduleComponents.Add($"in {CultureInfo.CurrentCulture.DateTimeFormat.GetMonthName(monthNum)}");
            }
        }
        if (scheduleComponents.Count > 0)
        {
            sb.Append(" " + string.Join(", and ", scheduleComponents));
        }
        else
        {
            sb.Append(" every day");
        }
        Description = sb.ToString() + ".";
    }

    private async Task CopyToClipboard()
    {
        await JS.InvokeVoidAsync("navigator.clipboard.writeText", CrontabExpression);
    }

    private void GenerateRandom()
    {
        var s = GenerateRandomState();
        ApplyPreset(s);
    }

    private void ApplyPreset(StateModel s)
    {
        MinuteInput = s.Minute;
        HourInput = s.Hour;
        DayOfMonthInput = s.Dom;
        MonthInput = s.Mon;
        Mon.Checked = s.Dow.Contains(((int)DayOfWeek.Monday).ToString());
        Tue.Checked = s.Dow.Contains(((int)DayOfWeek.Tuesday).ToString());
        Wed.Checked = s.Dow.Contains(((int)DayOfWeek.Wednesday).ToString());
        Thu.Checked = s.Dow.Contains(((int)DayOfWeek.Thursday).ToString());
        Fri.Checked = s.Dow.Contains(((int)DayOfWeek.Friday).ToString());
        Sat.Checked = s.Dow.Contains(((int)DayOfWeek.Saturday).ToString());
        Sun.Checked = s.Dow.Contains(((int)DayOfWeek.Sunday).ToString());
        UpdateAllFromState();
    }

    private IEnumerable<CalendarCell> BuildCalendarCells(int year, int month, StateModel state)
    {
        var first = new DateTime(year, month, 1);
        int offset = ((int)first.DayOfWeek + 6) % 7;
        for (int i = 0; i < offset; i++) yield return new CalendarCell();
        int days = DateTime.DaysInMonth(year, month);
        for (int d = 1; d <= days; d++)
        {
            var dt = new DateTime(year, month, d);
            bool active = MatchesDate(state, dt);
            string tooltip = $"{dt:dddd}, CW {GetIsoWeekNumber(dt)}" + (active ? $"\n{Hour.PadLeft(2, '0')}:{Minute.PadLeft(2, '0')}" : "");
            yield return new CalendarCell { Day = d, Active = active, Tooltip = tooltip };
        }
    }

    private bool MatchesDate(StateModel s, DateTime dt)
    {
        bool m1 = (s.Dom == "*" || MatchField(s.Dom, dt.Day));
        bool m2 = (s.Mon == "*" || MatchField(s.Mon, dt.Month));
        bool m3 = (!s.Dow.Any() || s.Dow.Contains(((int)dt.DayOfWeek).ToString()));
        return m1 && m2 && m3;
    }

    private int GetIsoWeekNumber(DateTime dt) => CultureInfo.CurrentCulture.Calendar.GetWeekOfYear(dt, CalendarWeekRule.FirstFourDayWeek, DayOfWeek.Monday);

    private StateModel GenerateRandomState()
    {
        var types = new[] { "daily", "weekly", "monthly", "weekday", "yearly" };
        var rnd = new Random();
        var type = types[rnd.Next(types.Length)];
        var s = new StateModel { Minute = "0", Hour = "0", Dom = "*", Mon = "*", Dow = new List<string>() };
        s.Minute = new[] { "0", "15", "30", "45" }[rnd.Next(4)];
        s.Hour = rnd.Next(24).ToString();
        if (type == "weekly")
        {
            s.Dow = new List<string> { rnd.Next(7).ToString() };
        }
        else if (type == "monthly")
        {
            s.Dom = rnd.Next(1, 29).ToString();
        }
        else if (type == "yearly")
        {
            s.Mon = rnd.Next(1, 13).ToString();
            s.Dom = rnd.Next(1, 28).ToString();
        }
        else if (type == "weekday")
        {
            s.Dow = Enumerable.Range((int)DayOfWeek.Monday, 5).Select(i => i.ToString()).ToList();
        }
        if (type != "yearly" && rnd.Next(5) == 0)
        {
            s.Mon = rnd.Next(1, 13).ToString();
        }
        return s;
    }

    private bool MatchField(string expr, int num)
    {
        if (string.IsNullOrWhiteSpace(expr) || expr == "*") return true;
        foreach (var part in expr.Split(','))
        {
            var p = part.Trim();
            if (p.Contains('-'))
            {
                var range = p.Split('-');
                if (int.TryParse(range[0], out int start) && int.TryParse(range[1], out int end))
                {
                    if (num >= start && num <= end) return true;
                }
            }
            else if (int.TryParse(p, out int val) && val == num)
            {
                return true;
            }
        }
        return false;
    }

    private bool IsValidMinute(string value) => IsValidCronField(value, 0, 59);
    private bool IsValidHour(string value) => IsValidCronField(value, 0, 23);
    private bool IsValidDayOfMonth(string value) => IsValidCronField(value, 1, 31);
    private bool IsValidMonth(string value) => IsValidCronField(value, 1, 12);
    private bool IsValidDayOfWeek(string value) => IsValidCronField(value, 0, 6);

    private bool IsValidCronField(string value, int min, int max)
    {
        if (string.IsNullOrWhiteSpace(value) || value == "*") return true;
        var parts = value.Split(',');
        var seen = new HashSet<string>();
        foreach (var part in parts)
        {
            var p = part.Trim();
            if (p == "*") continue;
            if (!seen.Add(p))
            {
                // Duplicate detected
                return false;
            }
            if (p.Contains("-"))
            {
                var range = p.Split('-');
                if (range.Length != 2) return false;
                if (!int.TryParse(range[0], out int start) || !int.TryParse(range[1], out int end)) return false;
                if (start > end || start < min || end > max) return false;
            }
            else
            {
                if (!int.TryParse(p, out int val) || val < min || val > max) return false;
            }
        }
        return true;
    }

    private void ValidateAndSetMinute(string value)
    {
        if (string.IsNullOrWhiteSpace(value)) value = "*";
        if (IsValidMinute(value))
        {
            MinuteError = null;
            _minute = value;
        }
        else
        {
            MinuteError = "Invalid minute (0-59, *, lists, or ranges)";
            _minute = "*";
        }
        SyncToUnifiedExpression();
    }
    private void ValidateAndSetHour(string value)
    {
        if (string.IsNullOrWhiteSpace(value)) value = "*";
        if (IsValidHour(value))
        {
            HourError = null;
            _hour = value;
        }
        else
        {
            HourError = "Invalid hour (0-23, *, lists, or ranges)";
            _hour = "*";
        }
        SyncToUnifiedExpression();
    }
    private void ValidateAndSetDayOfMonth(string value)
    {
        if (string.IsNullOrWhiteSpace(value)) value = "*";
        if (IsValidDayOfMonth(value))
        {
            DayOfMonthError = null;
            _dayOfMonth = value;
        }
        else
        {
            if (HasDuplicateInList(value))
                DayOfMonthError = "Duplicate values are not allowed (e.g. 3,3)";
            else
                DayOfMonthError = "Invalid day of month (1-31, *, lists, or ranges)";
            _dayOfMonth = "*";
        }
        SyncToUnifiedExpression();
    }
    private void ValidateAndSetMonth(string value)
    {
        if (string.IsNullOrWhiteSpace(value)) value = "*";
        if (IsValidMonth(value))
        {
            MonthError = null;
            _month = value;
        }
        else
        {
            if (HasDuplicateInList(value))
                MonthError = "Duplicate values are not allowed (e.g. 12,12)";
            else
                MonthError = "Invalid month (1-12, *, lists, or ranges)";
            _month = "*";
        }
        SyncToUnifiedExpression();
    }

    private bool HasDuplicateInList(string value)
    {
        if (string.IsNullOrWhiteSpace(value) || value == "*") return false;
        var parts = value.Split(',').Select(p => p.Trim()).Where(p => p != "*");
        return parts.GroupBy(x => x).Any(g => g.Count() > 1);
    }

    public class WeekDayItem
    {
        public string Name;
        public DayOfWeek Value;
        private bool _checked;
        public Action OnChanged;
        public bool Checked
        {
            get => _checked;
            set
            {
                if (_checked != value)
                {
                    _checked = value;
                    OnChanged?.Invoke(); 
                }
            }
        }
        public WeekDayItem(string name, DayOfWeek val) { Name = name; Value = val; }
    }
    public class Preset { public string Label; public StateModel State; public Preset(string l, StateModel s) { Label = l; State = s; } }
    public class CalendarCell { public int Day; public bool Active; public string Tooltip; }
    public class StateModel
    {
        public string Minute = "*";
        public string Hour = "*";
        public string Dom = "*";
        public string Mon = "*";
        public List<string> Dow = new(); 
    }
}
