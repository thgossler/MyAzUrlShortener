@inherits LayoutComponentBase
@using AzUrlShortener.Core.Domain
@using AzUrlShortener.AdminUI
@using AzUrlShortener.AdminUI.Components
@using AzUrlShortener.AdminUI.Components.Dialogues
@using AzUrlShortener.AdminUI.Services
@using Microsoft.FluentUI.AspNetCore.Components
@inject IJSRuntime JS

@rendermode InteractiveServer

<FluentStack Orientation="Orientation.Vertical" VerticalGapGap="10" Width="100%">
    <FluentLabel Typo="Typography.H6" Color="Color.FillInverse">Overall period</FluentLabel>
    <FluentStack Orientation="Orientation.Horizontal" HorizontalGap="10" Width="100%">
        <div Width="50%">
            <FluentDatePicker Label="Starting From" Value="@schedule.Start.LocalDateTime" ValueChanged="@( e => StartDateTimeReconcile(e!.Value) )" />
            <FluentTimePicker Value="@schedule.Start.LocalDateTime" ValueChanged="@( e => StartDateTimeReconcile(e!.Value) )" />
        </div>
        <div Width="50%">
            <FluentDatePicker Label="Ending at" Value="@schedule.End.LocalDateTime" ValueChanged="@( e => EndDateTimeReconcile(e!.Value) )" />
            <FluentTimePicker Value="@schedule.End.LocalDateTime" ValueChanged="@( e => EndDateTimeReconcile(e!.Value) )" />
        </div>
    </FluentStack>
    <div style="width: 100%;">
        <FluentTextField Label="Alternative URL" Name="AlternativeUrl" Placeholder="https://..." @bind-Value="schedule.AlternativeUrl" @bind-Value:after="OnScheduleFieldChanged" style="width: 90%;" />
    </div>
    <div>
        <FluentLabel Typo="Typography.H6" Color="Color.FillInverse" Style="margin-bottom: 8px">Recurrences within overall period</FluentLabel>
        <FluentStack Orientation="Orientation.Vertical" HorizontalGap="10">
            <FluentStack Orientation="Orientation.Horizontal" HorizontalGap="10">
                <FluentTextField Name="Cron" Label="Cron expression" Placeholder="* * * * *" @bind-Value="schedule.Cron" @bind-Value:after="OnScheduleFieldChanged" />
                <FluentButton Appearance="Appearance.Accent" OnClick="OpenCronDialog">Edit</FluentButton>
            </FluentStack>
            <p style="margin-left: 20px; font-style: italic">Cron helper tools:&nbsp;&nbsp;<a href="https://www.uptimia.com/cron-expression-generator" target="blank">Uptimia Cron Expression Generator</a>,&nbsp;&nbsp;<a href="https://crontab.guru/" target="blank">Crontab.guru</a></p>
        </FluentStack>
    </div>
    <div>
        <FluentNumberField Name="DurationMinutes" Label="Duration (in minutes)" @bind-Value="schedule.DurationMinutes" @bind-Value:after="OnScheduleFieldChanged" Min="0" Step="5" />
    </div>
</FluentStack>

<script>
    window.getViewportWidth = () => {
        return window.innerWidth;
    };

    window.disableFluentDialogFocusTrap = function(dialogId) {
        const dialog = document.getElementById(dialogId) || document.querySelector(dialogId);
        if (!dialog) return;
        dialog.trapFocus = false;
        dialog.isTrappingFocus = false;
        dialog.updateTrapFocus(false);
    };

    window.enableFluentDialogFocusTrap = function(dialogId) {
        const dialog = document.getElementById(dialogId) || document.querySelector(dialogId);
        if (!dialog) return;
        dialog.trapFocus = true;
        dialog.isTrappingFocus = true;
        dialog.updateTrapFocus(true);
    };
</script>

@code {
    [Parameter]
    public Schedule schedule { get; set; } = new Schedule();
    
    [Parameter]
    public EventCallback<Schedule> OnScheduleChanged { get; set; }
    
    private DialogParameters dialogParameters = default!;
    private IDialogReference? dialogReference;
    private IDialogService DialogService { get; set; } = default!;

    [Inject]
    private IDialogService _dialogService { get; set; } = default!;

    protected override void OnInitialized()
    {
        DialogService = _dialogService;
    }

    private async Task<int> GetViewportWidthAsync()
    {
        return await JS.InvokeAsync<int>("getViewportWidth");
    }

    private void StartDateTimeReconcile(DateTime value)
    {
        schedule.Start = new DateTimeOffset(value);
        OnScheduleChanged.InvokeAsync(schedule);
    }

    private void EndDateTimeReconcile(DateTime value)
    {
        schedule.End = new DateTimeOffset(value);
        OnScheduleChanged.InvokeAsync(schedule);
    }
    
    private void OnScheduleFieldChanged()
    {
        OnScheduleChanged.InvokeAsync(schedule);
    }

    private async Task OpenCronDialog()
    {
        var viewportWidth = await GetViewportWidthAsync();
        
        // Create a deep copy of the schedule to preserve its state
        Schedule originalSchedule = new Schedule
        {
            Id = schedule.Id,
            Start = schedule.Start,
            End = schedule.End,
            Cron = schedule.Cron,
            DurationMinutes = schedule.DurationMinutes,
            AlternativeUrl = schedule.AlternativeUrl
        };
        
        dialogParameters = new DialogParameters
        {
            Id = "EditCronDialog",
            Title = "Edit Cron Expression",
            Width = viewportWidth > 600 ? "800px" : $"{viewportWidth}px",
            PreventScroll = false,
            PrimaryAction = "OK",
            SecondaryAction = "Cancel",
            PreventDismissOnOverlayClick = true,
            TrapFocus = true,
            Modal = true,
            PrimaryActionEnabled = true,
            SecondaryActionEnabled = true
        };
        
        try
        {
            await JS.InvokeVoidAsync("disableFluentDialogFocusTrap", "NewUrlDialog");
            await JS.InvokeVoidAsync("disableFluentDialogFocusTrap", "UpdateUrlDialog");

            // Open the CronEditorDialog
            dialogReference = await DialogService.ShowDialogAsync<CronEditorDialog>(
                new CronEditorDialogParameters
                {
                    CronExpression = schedule.Cron,
                    OnSave = null
                }, 
                dialogParameters);
            
            var result = await dialogReference.Result;

            await JS.InvokeVoidAsync("enableFluentDialogFocusTrap", "NewUrlDialog");
            await JS.InvokeVoidAsync("enableFluentDialogFocusTrap", "UpdateUrlDialog");

            if (!result.Cancelled && result.Data is CronEditorDialogParameters cronParams)
            {
                // Apply the change only if not cancelled
                schedule.Cron = cronParams.CronExpression;
            }
            else
            {
                // Restore from our copy if cancelled
                schedule.Cron = originalSchedule.Cron;
            }
            
            // Always notify of changes to ensure parent updates 
            await OnScheduleChanged.InvokeAsync(schedule);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error in Cron dialog: {ex.Message}");
            // Restore original on error
            schedule.Cron = originalSchedule.Cron;
            await OnScheduleChanged.InvokeAsync(schedule);
        }
    }
}

