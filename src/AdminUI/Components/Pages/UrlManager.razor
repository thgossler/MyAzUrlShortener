@page "/manageurls"

@using System.Net
@using AzUrlShortener.Core.Domain
@using AzUrlShortener.Core.Messages
@using AzUrlShortener.AdminUI
@using AzUrlShortener.AdminUI.Components
@using AzUrlShortener.AdminUI.Components.Dialogues
@using AzUrlShortener.AdminUI.Services
@using Azure.Data.Tables
@inject UrlManagerClient urlManager
@inject UserService userService
@inject IJSRuntime JSRuntime
@inject IDialogService DialogService
@inject IToastService toastService
@inject NavigationManager NavigationManager
@inject IConfiguration Configuration

@rendermode InteractiveServer

<PageTitle>Short URL Manager</PageTitle>

<div class="page-container">
    <div class="header-section">
        <h1>Manage URLs</h1>
        <h4 class="hide-on-small-sized-displays">Add, edit and archive short URL records</h4>

        <div class="actions-row">
            <FluentButton OnClick="@(CreateShortUrl)" Disabled="@importInProgress" Appearance="Appearance.Accent" IconStart="@(new Icons.Regular.Size16.Add())">Add</FluentButton>
            <FluentButton OnClick="@(ManualRefresh)" Disabled="@importInProgress" Appearance="Appearance.Accent" IconStart="@(new Icons.Regular.Size16.ArrowSync())"><div class="hide-on-small-height-displays">Refresh</div></FluentButton>

            <div class="hide-on-small-sized-displays">
                @if (filteredUrlList == null || !filteredUrlList.Any())
                {
                    <FluentButton OnClick="@(AddExampleData)" Disabled="@importInProgress" Appearance="Appearance.Accent" IconStart="@(new Icons.Regular.Size16.DataHistogram())">Add example data</FluentButton>
                }

                @if (!string.IsNullOrWhiteSpace(importConnectionString))
                {
                    <FluentButton OnClick="@(ImportRecords)" Disabled="@importInProgress" Appearance="Appearance.Accent" IconStart="@(new Icons.Regular.Size16.ArrowUpload())">Import records</FluentButton>
                }
            </div>

            @if (isLoading)
            {
                <div class="loading-indicator">
                    <FluentProgressRing />
                    <div class="hide-on-small-sized-displays">Loading...</div>
                </div>
            }

            <div class="search-container">
                <FluentStack Orientation="Orientation.Horizontal" Style="align-items: baseline;">
                    @if (isAdmin || userService.CanNormalUsersViewAllRecords())
                    {
                        <div class="filter-controls">
                            <FluentCheckbox @bind-Value="showOnlyMyRecords" 
                                Label="Only my records"
                                @onchange="OnShowOnlyMyRecordsChanged" 
                                Style="min-width: max-content" />
                        </div>
                    }
                    <FluentSearch Placeholder="Filter..."
                        @bind-Value="searchText"
                        @bind-Value:after="OnSearchInput"
                        Immediate="true"
                        ImmediateDelay="500"
                        Icon="@(new Icons.Regular.Size16.Search())" />
                </FluentStack>
            </div>
        </div>
    </div>

    @if (!isAdmin)
    {
        <div class="info-banner">
            <FluentIcon Value="@(new Icons.Regular.Size16.Info())" Color="@Color.Accent" />
            @if (userService.CanNormalUsersViewAllRecords())
            {
                <span>You are viewing all URLs but can only modify your own.</span>
            }
            else
            {
                <span>You are viewing only URLs you have created.</span>
            }
        </div>
    }

    <div class="grid-container">
        <FluentDataGrid Id="grdUrls" @ref="_dataGrid"
                Class="sticky-header-grid"
                Items="@filteredUrlList"
                ResizableColumns=true
                GridTemplateColumns="60px auto auto auto auto 120px 120px 120px"
                Pagination="@pagination"
                AutoItemsPerPage=false
                RowSize="DataGridRowSize.Medium"
                ShowHover=true>
            <ChildContent>
                <TemplateColumn Sortable="false">
                    <FluentButton OnClick="@(async () => await CopyToClipboardAsync(context!.ShortUrl))" IconEnd="@(new Icons.Regular.Size16.Copy())" Title="Copy" />
                </TemplateColumn>
                <TemplateColumn Title="Vanity" Sortable="true" SortBy="@sortByVanities" Style="min-width: 100px">
                    <div class="truncate-with-tooltip" title="@context!.Vanity">
                        <FluentAnchor Href="@context!.ShortUrl" Target="_blank" Appearance="Appearance.Hypertext">@context!.Vanity</FluentAnchor>
                    </div>
                </TemplateColumn>
                <TemplateColumn Title="Title" Sortable="true" Style="min-width: 130px">
                    <div class="truncate-with-tooltip" title="@context!.Title">
                        @context!.Title
                    </div>
                </TemplateColumn>
                <TemplateColumn Title="Url" Sortable="true" Style="min-width: 150px">
                    <div class="truncate-with-tooltip" title="@context!.Url">
                        <FluentAnchor Href="@context!.Url" Target="_blank" Appearance="Appearance.Hypertext">@context!.Url</FluentAnchor>
                    </div>
                </TemplateColumn>
                @if (isAdmin)
                {
                    <TemplateColumn Title="Owner" Sortable="true" Style="min-width: 130px">
                        <div class="truncate-with-tooltip" title="@context!.OwnerUpn">
                            <FluentAnchor Href="@($"mailto:{context!.OwnerUpn}?subject=URL Shortener record '{context!.ShortUrl}'")" Appearance="Appearance.Hypertext">@context!.OwnerUpn</FluentAnchor>
                        </div>
                    </TemplateColumn>
                }
                <TemplateColumn Title="Schedule(s)" Sortable="true" SortBy="@sortBySchedules">
                    @(context!.Schedules?.Count ?? 0)
                </TemplateColumn>
                <TemplateColumn Title="Clicks" Align="Align.End" Sortable="true" SortBy="@sortByClicks">
                    <FluentStack Orientation="Orientation.Horizontal" VerticalAlignment="VerticalAlignment.Center" HorizontalAlignment="HorizontalAlignment.End">
                        @context.Clicks
                        <div id="stats-button-@context.RowKey">
                            @{
                                var isOwner = string.Equals(context!.OwnerUpn, currentUserUpn, StringComparison.OrdinalIgnoreCase);
                                var canViewStats = isAdmin || isOwner;
                            }
                            <FluentButton OnClick="@(() => NavigateToStats(context.Vanity))"
                            IconEnd="@(new Icons.Regular.Size16.ChartMultiple())"
                            Title="View Statistics"
                            Disabled="@(!canViewStats)" />
                            @if (!canViewStats)
                            {
                                <FluentTooltip Anchor="@($"stats-button-{context.RowKey}")">
                                    You cannot view statistics for this URL because you didn't create it
                                </FluentTooltip>
                            }
                        </div>
                    </FluentStack>
                </TemplateColumn>
                <TemplateColumn Sortable="false">
                    @{
                        var isOwner = string.Equals(context!.OwnerUpn, currentUserUpn, StringComparison.OrdinalIgnoreCase);
                        var canModify = isAdmin || isOwner;
                        var canArchive = isAdmin || (isOwner && userService.CanNormalUsersArchiveRecords());
                    }

                    <FluentStack Orientation="Orientation.Horizontal" VerticalAlignment="VerticalAlignment.Center">
                        <div id="edit-button-@context.RowKey">
                            <FluentButton OnClick="@(() => EditShortUrl(context))"
                            IconEnd="@(new Icons.Regular.Size16.Edit())"
                            Title="Edit"
                            Disabled="@(!canModify)" />
                            @if (!canModify)
                            {
                                <FluentTooltip Anchor="@($"edit-button-{context.RowKey}")">
                                    You cannot modify this URL because you didn't create it
                                </FluentTooltip>
                            }
                        </div>

                        <div id="archive-button-@context.RowKey">
                            <FluentButton OnClick="@(async () => await ArchiveShortUrl(context))"
                            IconEnd="@(new Icons.Regular.Size16.Archive())"
                            Title="Archive"
                            Disabled="@(!canArchive)" />
                            @if (!canArchive)
                            {
                                <FluentTooltip Anchor="@($"archive-button-{context.RowKey}")">
                                    @if (!isOwner)
                                    {
                                        <span>You cannot archive this URL because you didn't create it</span>
                                    }
                                    else
                                    {
                                        <span>Only administrators can archive URL records</span>
                                    }
                                </FluentTooltip>
                            }
                        </div>
                    </FluentStack>
                </TemplateColumn>
            </ChildContent>
            <LoadingContent>
                <div class="custom-loading-content">
                    <FluentProgressRing /> Loading data...
                </div>
            </LoadingContent>
            <EmptyContent>
                <div class="custom-empty-content">
                    <FluentIcon Value="@(new Icons.Filled.Size16.Info())" Color="@Color.Accent" />&nbsp; No short URLs found.
                </div>
            </EmptyContent>
        </FluentDataGrid>
    </div>

    <div class="paginator-container">
        <FluentPaginator State="@pagination">
        </FluentPaginator>
    </div>
</div>

<style>
    .sticky-header-grid tr[row-type="header"] th {
        position: sticky;
        top: 0;
        z-index: 1;
        background-color: var(--neutral-layer-floating);
        box-shadow: 0 1px 3px rgba(0, 0, 0, 0.2);
    }

    .sticky-header-grid tbody {
        overflow-y: auto;
    }

    @@media (max-width: 600px), (max-height: 600px) {
        .custom-empty-content,
        .custom-loading-content {
            text-align: start !important;
            align-self: start !important;
            justify-content: start !important;
        }
    }
</style>

@code {
    private ListResponse urls = new ListResponse();
    private bool isAdmin = false;
    private string searchText = string.Empty;
    private string currentUserUpn = string.Empty;
    private bool showOnlyMyRecords = false;

    private string importConnectionString;
    private bool importInProgress = false;
    private bool isLoading = false;

    // Static property to remember if data has been loaded across page refreshes
    private static bool dataHasBeenLoadedBefore = false;

    // Remember the last loaded data to avoid unnecessary reloads
    private static List<ShortUrlEntity> cachedUrlList;

    IQueryable<ShortUrlEntity> urlList;
    IQueryable<ShortUrlEntity> filteredUrlList;
    FluentDataGrid<ShortUrlEntity> _dataGrid;
    PaginationState pagination = new PaginationState { ItemsPerPage = 100 };
    ShortUrlRequest shortUrlRequest = new ShortUrlRequest();
    ShortUrlEntity editedUrl = new ShortUrlEntity();

    GridSort<ShortUrlEntity> sortByClicks = GridSort<ShortUrlEntity>.ByDescending(p => p.Clicks);
    GridSort<ShortUrlEntity> sortBySchedules = GridSort<ShortUrlEntity>.ByDescending(p => p.Schedules.Count);
    GridSort<ShortUrlEntity> sortByVanities = GridSort<ShortUrlEntity>.ByAscending(p => p.RowKey);

    protected override async Task OnInitializedAsync()
    {
        importConnectionString = Configuration["ImportTableStorageConnectionString"] ?? string.Empty;

        isAdmin = await userService.IsAdminAsync();
        currentUserUpn = await userService.GetUserPrincipalNameAsync();

        // If we have cached data, use it immediately and avoid the loading state
        if (dataHasBeenLoadedBefore && cachedUrlList != null && cachedUrlList.Count > 0)
        {
            urlList = cachedUrlList.AsQueryable();
            FilterUrls();
        }
        else
        {
            // Only show loading indicator on first load
            isLoading = true;
            await RefreshGrid();
            dataHasBeenLoadedBefore = true;
        }
    }

    private void OnShowOnlyMyRecordsChanged(ChangeEventArgs args)
    {
        showOnlyMyRecords = !showOnlyMyRecords;
        FilterUrls();
    }

    private void OnSearchInput()
    {
        FilterUrls();
    }

    private async Task RefreshGrid()
    {
        try
        {
            isLoading = true;
            StateHasChanged();

            urlList = await urlManager.GetUrls();

            // Cache the data in a static field for future use
            if (urlList != null)
            {
                cachedUrlList = urlList.ToList();
            }

            FilterUrls();
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.ToString());
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task ManualRefresh()
    {
        await RefreshGrid();
        toastService.ShowInfo("URL list refreshed");
    }

    private void FilterUrls()
    {
        if (urlList == null)
        {
            filteredUrlList = null;
            return;
        }

        // Start with all available URLs
        IQueryable<ShortUrlEntity> filtered = urlList;

        // Apply owner filter if checkbox is checked
        if (showOnlyMyRecords && !string.IsNullOrEmpty(currentUserUpn))
        {
            filtered = filtered.Where(url =>
                url.OwnerUpn != null &&
                url.OwnerUpn.Equals(currentUserUpn, StringComparison.OrdinalIgnoreCase));
        }

        // Then apply text search filter
        if (!string.IsNullOrWhiteSpace(searchText))
        {
            // Apply the filter based on searchText (case-insensitive)
            var searchTerm = searchText.Trim().ToLowerInvariant();
            filtered = filtered.Where(url =>
                (url.Title != null && url.Title.ToLowerInvariant().Contains(searchTerm)) ||
                (url.Vanity != null && url.Vanity.ToLowerInvariant().Contains(searchTerm)) ||
                (url.Url != null && url.Url.ToLowerInvariant().Contains(searchTerm)) ||
                (isAdmin && url.OwnerUpn != null && url.OwnerUpn.ToLowerInvariant().Contains(searchTerm))
            );
        }

        filteredUrlList = filtered;

        // Reset pagination to first page when filtering
        pagination.SetCurrentPageIndexAsync(0);
    }


    private async Task UpdateUIList()
    {
        await RefreshGrid();
        StateHasChanged();
    }

    private async Task CreateShortUrl()
    {
        shortUrlRequest = new ShortUrlRequest();
        var dialog = await DialogService.ShowDialogAsync<NewUrlDialog>(shortUrlRequest, new DialogParameters()
            {
                Id = "NewUrlDialog",
                Title = "Create a new short URL record",
                PreventDismissOnOverlayClick = true,
                PreventScroll = true,
                TrapFocus = true,
                Width = "600px"
            });

        var result = await dialog.Result;
        if (!result.Cancelled && result.Data != null)
        {
            var dialogData = (ShortUrlRequest)result.Data;

            var urlRequest = new ShortRequest
                {
                    Title = dialogData.Title ?? string.Empty,
                    Url = dialogData.Url,
                    Vanity = dialogData.Vanity,
                    Schedules = dialogData.Schedules.ToArray()
                };

            try
            {
                var response = await urlManager.UrlCreate(urlRequest);
                if (response.Item1)
                {
                    await UpdateUIList();
                    toastService.ShowSuccess("Short URL created successfully");
                }
                else
                {
                    toastService.ShowError(response.Item2);
                }
            }
            catch (Exception ex)
            {
                toastService.ShowError(ex.Message);
            }
        }
    }

    [Inject] public IJSRuntime JsRuntime { get; set; }
    public async Task CopyToClipboardAsync(string url)
    {
        if (JsRuntime == null)
        {
            return;
        }
        await JSRuntime.InvokeVoidAsync("clipboardCopy.copyText", url);
    }

    private async Task EditShortUrl(ShortUrlEntity urlEntity)
    {
        if (!isAdmin && !string.Equals(urlEntity.OwnerUpn, currentUserUpn, StringComparison.OrdinalIgnoreCase))
        {
            toastService.ShowError("You are not authorized to edit this URL");
            return;
        }

        var dialog = await DialogService.ShowDialogAsync<UpdateUrlDialog>(urlEntity, new DialogParameters()
            {
                Id = "UpdateUrlDialog",
                Title = $"Update short URL record for '{urlEntity.Vanity}'",
                PreventDismissOnOverlayClick = true,
                PreventScroll = true,
                TrapFocus = true,
                Width = "600px"
            });

        var result = await dialog.Result;
        if (!result.Cancelled && result.Data != null)
        {
            var dialogData = (ShortUrlEntity)result.Data;

            var response = await urlManager.UrlUpdate(urlEntity);
            if (response != null)
            {
                await UpdateUIList();
                toastService.ShowSuccess("Short URL updated successfully");
            }
        }
    }

    private void NavigateToStats(string vanity)
    {
        NavigationManager.NavigateTo($"/Statistics/{vanity}");
    }

    public async Task ArchiveShortUrl(ShortUrlEntity urlEntity)
    {
        var isOwner = string.Equals(urlEntity.OwnerUpn, currentUserUpn, StringComparison.OrdinalIgnoreCase);

        if (!isAdmin && (!isOwner || !userService.CanNormalUsersArchiveRecords()))
        {
            if (!isOwner)
            {
                toastService.ShowError("You are not authorized to archive this URL because you didn't create it");
            }
            else
            {
                toastService.ShowError("Only administrators can archive URL records");
            }
            return;
        }

        var result = await urlManager.UrlArchive(urlEntity);
        if (result)
        {
            await UpdateUIList();
            toastService.ShowSuccess("Short URL archived successfully");
        }
        else
        {
            toastService.ShowError("Not authorized to archive this URL");
        }
    }

    private async Task AddExampleData()
    {
        try
        {
            isLoading = true;
            StateHasChanged();

            // Example 1: GitHub
            var githubRequest = new ShortRequest
                {
                    Title = "GitHub",
                    Url = "https://github.com",
                    Vanity = "gh",
                    Schedules = Array.Empty<Schedule>()
                };

            // Example 2: Microsoft
            var microsoftRequest = new ShortRequest
                {
                    Title = "Microsoft",
                    Url = "https://microsoft.com",
                    Vanity = "ms",
                    Schedules = Array.Empty<Schedule>()
                };

            // Example 3: Stack Overflow
            var stackOverflowRequest = new ShortRequest
                {
                    Title = "Stack Overflow",
                    Url = "https://stackoverflow.com",
                    Vanity = "so",
                    Schedules = Array.Empty<Schedule>()
                };

            var examples = new[] { githubRequest, microsoftRequest, stackOverflowRequest };
            var successCount = 0;

            foreach (var example in examples)
            {
                try
                {
                    var response = await urlManager.UrlCreate(example);
                    if (response.Item1)
                    {
                        successCount++;
                    }
                }
                catch (Exception ex)
                {
                    Console.WriteLine($"Failed to create example {example.Vanity}: {ex.Message}");
                }
            }

            await UpdateUIList();
            toastService.ShowSuccess($"{successCount} example URLs created successfully");
        }
        catch (Exception ex)
        {
            toastService.ShowError($"Failed to create example data: {ex.Message}");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task ImportRecords()
    {
        try
        {
            importInProgress = true;
            isLoading = true;
            StateHasChanged();

            toastService.ShowInfo("Importing records from configured storage...");

            var sourceTableClient = new TableServiceClient(importConnectionString);
            sourceTableClient.CreateTableIfNotExists("UrlsDetails");
            var sourceTable = sourceTableClient.GetTableClient("UrlsDetails");

            var sourceEntities = new List<ShortUrlEntity>();
            var queryResults = sourceTable.QueryAsync<ShortUrlEntity>(e => e.RowKey != "KEY");
            await foreach (var entity in queryResults)
            {
                if (!(entity.IsArchived ?? false))
                {
                    sourceEntities.Add(entity);
                }
            }

            var currentUserUpn = await userService.GetUserPrincipalNameAsync();

            var importedCount = 0;
            foreach (var entity in sourceEntities)
            {
                var urlRequest = new ShortRequest
                    {
                        Title = entity.Title ?? string.Empty,
                        Url = entity.Url,
                        Vanity = entity.Vanity,
                        Clicks = entity.Clicks,
                        Schedules = null
                    };

                try
                {
                    var response = await urlManager.UrlCreate(urlRequest);
                    importedCount++;
                }
                catch (Exception ex)
                {
                    Console.WriteLine($"Failed to import {entity.Vanity}: {ex.Message}");
                }
            }
            toastService.ShowSuccess($"{importedCount} records imported successfully");
            await RefreshGrid();
        }
        catch (Exception ex)
        {
            toastService.ShowError($"Import failed: {ex.Message}");
        }
        finally
        {
            isLoading = false;
            importInProgress = false;
            StateHasChanged();
        }
    }
}
