@page "/manageurls"

@using System.Net
@using AzUrlShortener.Core.Domain
@using AzUrlShortener.Core.Messages
@using AzUrlShortener.AdminUI
@using AzUrlShortener.AdminUI.Components
@using AzUrlShortener.AdminUI.Components.Dialogues
@using AzUrlShortener.AdminUI.Services
@inject IConfiguration Configuration
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
@inject SharedStateService SharedStateService
@inject UrlManagerClient urlManager
@inject UserService userService
@inject IDialogService DialogService
@inject IToastService toastService

@rendermode InteractiveServer

@implements IAsyncDisposable

<PageTitle>Manage URLs</PageTitle>

<div class="page-container">
    <div class="header-section">
        <h1>Manage URLs</h1>
        <h4 class="hide-on-small-sized-displays">Add, edit and archive short URL records</h4>

        <div class="actions-row">
            <FluentButton OnClick="@(CreateShortUrl)" Disabled="@importInProgress" Appearance="Appearance.Accent" IconStart="@(new Icons.Regular.Size16.Add())">Add</FluentButton>
            <FluentButton OnClick="@(() => ManualRefresh())" Disabled="@importInProgress" Appearance="Appearance.Accent" IconStart="@(new Icons.Regular.Size16.ArrowSync())"><div class="hide-on-small-height-displays">Refresh</div></FluentButton>

            <div class="hide-on-small-sized-displays">
                @if ((filteredUrlList == null || !filteredUrlList.Any()) && isAdmin)
                {
                    <FluentButton OnClick="@(AddExampleData)" Disabled="@importInProgress" Appearance="Appearance.Accent" IconStart="@(new Icons.Regular.Size16.DataHistogram())">Add example data</FluentButton>
                }

                @if (!string.IsNullOrWhiteSpace(importConnectionString) && isAdmin)
                {
                    <FluentButton OnClick="@(ImportRecords)" Disabled="@(importInProgress || importTriggeredAndNotFailed)" Appearance="Appearance.Accent" IconStart="@(new Icons.Regular.Size16.ArrowUpload())">Import records</FluentButton>
                }
            </div>

            @if (isLoading)
            {
                <div class="loading-indicator">
                    <FluentProgressRing />
                    <div class="hide-on-small-sized-displays">Loading...</div>
                </div>
            }

            <div class="search-container">
                <FluentStack Orientation="Orientation.Horizontal" Style="align-items: baseline;">
                    @if (isAdmin || userService.CanRegularUsersViewAllRecords())
                    {
                        <div class="filter-controls">
                            <FluentCheckbox @bind-Value="showOnlyMyRecords" 
                                Label="Only my records"
                                @bind-Value:after="OnShowOnlyMyRecordsChanged" 
                                Style="min-width: max-content" />
                        </div>
                    }
                    <FluentSearch Placeholder="Filter..."
                        @bind-Value="searchText"
                        @bind-Value:after="OnSearchInput"
                        Immediate="true"
                        ImmediateDelay="350"
                        Icon="@(new Icons.Regular.Size16.Search())" />
                </FluentStack>
            </div>
        </div>
    </div>

    @if (!isAdmin)
    {
        <div class="info-banner">
            <FluentIcon Value="@(new Icons.Regular.Size16.Info())" Color="@Color.Accent" />
            @if (userService.CanRegularUsersViewAllRecords())
            {
                <span>You are viewing all URLs but can only modify your own.</span>
            }
            else
            {
                <span>You are viewing only URLs you have created.</span>
            }
        </div>
    }

        <div class="grid-container">
            <FluentDataGrid Id="grdUrls" @ref="_dataGrid"
                    Class="sticky-header-grid"
                    Items="@filteredUrlList"
                    ResizableColumns=true
                    GridTemplateColumns="70px auto auto auto auto 120px 120px 120px"
                    Pagination="@pagination"
                    AutoItemsPerPage=false
                    RowSize="DataGridRowSize.Medium"
                    ShowHover=true>
                <ChildContent>
                    <TemplateColumn Sortable="false">
                        <FluentButton OnClick="@(async () => await CopyToClipboardAsync(context!.ShortUrl))" IconEnd="@(new Icons.Regular.Size16.Copy())" Title="Copy" />
                    </TemplateColumn>
                    <TemplateColumn Title="Vanity" Sortable="true" SortBy="@sortByVanities" Style="min-width: 100px">
                        <div class="truncate-with-tooltip" title="@context!.Vanity">
                            <FluentAnchor Href="@context!.ShortUrl" Target="_blank" Appearance="Appearance.Hypertext">@context!.Vanity</FluentAnchor>
                        </div>
                    </TemplateColumn>
                    <TemplateColumn Title="Title" Sortable="true" SortBy="@sortByTitle" Style="min-width: 130px">
                        <div class="truncate-with-tooltip" title="@context!.Title">
                            @context!.Title
                        </div>
                    </TemplateColumn>
                    <TemplateColumn Title="Url" Sortable="true" SortBy="@sortByUrl" Style="min-width: 150px">
                        <div class="truncate-with-tooltip" title="@context!.Url">
                            <FluentAnchor Href="@context!.Url" Target="_blank" Appearance="Appearance.Hypertext">@context!.Url</FluentAnchor>
                        </div>
                    </TemplateColumn>
                    @if (isAdmin)
                    {
                        <TemplateColumn Title="Owner" Sortable="true" Style="min-width: 130px">
                            <div class="truncate-with-tooltip" title="@context!.OwnerUpn">
                                <FluentAnchor Href="@($"mailto:{context!.OwnerUpn}?subject=URL Shortener record '{context!.ShortUrl}'")" Appearance="Appearance.Hypertext">@context!.OwnerUpn</FluentAnchor>
                            </div>
                        </TemplateColumn>
                    }
                    <TemplateColumn Title="Schedule(s)" Sortable="true" SortBy="@sortBySchedules">
                        @(context!.Schedules?.Count ?? 0)
                    </TemplateColumn>
                    <TemplateColumn Title="Clicks" Align="Align.End" Sortable="true" SortBy="@sortByClicks">
                        <FluentStack Orientation="Orientation.Horizontal" VerticalAlignment="VerticalAlignment.Center" HorizontalAlignment="HorizontalAlignment.End">
                            @{
                                var isOwner = string.Equals(context!.OwnerUpn, currentUserUpn, StringComparison.OrdinalIgnoreCase);
                                var canViewStats = isAdmin || isOwner || canRegularUsersViewAllStatistics;
                            }
                            @if (canViewStats) {
                                @context.Clicks
                            }
                            else
                            {
                                <span>N/A</span>
                            }
                            <div id="stats-button-@context.RowKey">
                                <FluentButton OnClick="@(() => NavigateToStats(context.Vanity))"
                                IconEnd="@(new Icons.Regular.Size16.ChartMultiple())"
                                Title="View Statistics"
                                Disabled="@(!canViewStats)" />
                                @if (!canViewStats)
                                {
                                    <FluentTooltip Anchor="@($"stats-button-{context.RowKey}")">
                                        You cannot view statistics for this URL because you didn't create it
                                    </FluentTooltip>
                                }
                            </div>
                        </FluentStack>
                    </TemplateColumn>
                    <TemplateColumn Sortable="false">
                        @{
                            var isOwner = string.Equals(context!.OwnerUpn, currentUserUpn, StringComparison.OrdinalIgnoreCase);
                            var canModify = isAdmin || isOwner;
                            var canArchive = isAdmin || (isOwner && canRegularUsersArchiveRecords);
                            var canDelete = isAdmin || (isOwner && canRegularUsersDeleteRecords);
                        }

                        <FluentStack Orientation="Orientation.Horizontal" VerticalAlignment="VerticalAlignment.Center">
                            <div id="edit-button-@context.RowKey">
                                <FluentButton OnClick="@(() => EditShortUrl(context))"
                                IconEnd="@(new Icons.Regular.Size16.Edit())"
                                Title="Edit"
                                Disabled="@(!canModify)" />
                                @if (!canModify)
                                {
                                    <FluentTooltip Anchor="@($"edit-button-{context.RowKey}")">
                                        You cannot modify this URL because you didn't create it
                                    </FluentTooltip>
                                }
                            </div>

                            <div id="archive-menu-@context.RowKey">
                                <FluentButton Id="@($"archive-action-button-{context.RowKey}")" 
                                              Appearance="Appearance.Outline" 
                                              IconEnd="@(new Icons.Regular.Size16.Archive())" 
                                              Title="Archive" 
                                              Disabled="@(!canArchive)"
                                              OnClick="@(() => ArchiveMenuStates[context.RowKey] = true)" />
                                @if (canArchive)
                                {
                                    <FluentMenu Anchor="@($"archive-action-button-{context.RowKey}")" 
                                                UseMenuService="true" 
                                                VerticalThreshold="170"
                                                @bind-Open="ArchiveMenuStates[context.RowKey]"
                                                Anchored="true">
                                        <FluentMenuItem @onclick="@(async () => { await ArchiveShortUrl(context); })">
                                            <FluentIcon Value="@(new Icons.Regular.Size16.Archive())" Color="@Color.Neutral" Slot="start" />
                                            Archive
                                        </FluentMenuItem>
                                        @if (isAdmin || canDelete)
                                        {
                                            <FluentDivider />
                                            <FluentMenuItem @onclick="@(async () => await ConfirmDeleteShortUrl(context))">
                                                <FluentIcon Value="@(new Icons.Regular.Size16.Delete())" Color="@Color.Neutral" Slot="start" />
                                                Delete
                                            </FluentMenuItem>
                                        }
                                    </FluentMenu>
                                }
                                else 
                                {
                                    <FluentTooltip Anchor="@($"archive-action-button-{context.RowKey}")">
                                        @if (!isOwner)
                                        {
                                            <span>You cannot remove this URL because you didn't create it</span>
                                        }
                                        else
                                        {
                                            <span>Only administrators can remove URL records</span>
                                        }
                                    </FluentTooltip>
                                }
                            </div>
                        </FluentStack>
                    </TemplateColumn>
                </ChildContent>
                <LoadingContent>
                        <div class="custom-loading-content">
                            <FluentProgressRing /> Loading data...
                        </div>
                </LoadingContent>
                <EmptyContent>
                    <div class="custom-empty-content">
                        <FluentIcon Value="@(new Icons.Filled.Size16.Info())" Color="@Color.Accent" />&nbsp; No short URLs found.
                    </div>
                </EmptyContent>
            </FluentDataGrid>
        </div>

        <div class="paginator-container">
            <FluentPaginator State="@pagination">
            </FluentPaginator>
        </div>
</div>

<style>
    .sticky-header-grid tr[row-type="header"] th {
        position: sticky;
        top: 0;
        z-index: 1;
        background-color: var(--neutral-layer-floating);
        box-shadow: 0 1px 3px rgba(0, 0, 0, 0.2);
    }

    .sticky-header-grid tbody {
        overflow-y: auto;
    }

    @@media (max-width: 600px), (max-height: 600px) {
        .custom-empty-content,
        .custom-loading-content {
            text-align: start !important;
            align-self: start !important;
            justify-content: start !important;
        }
    }
</style>

@code {







    private ListResponse urls = new ListResponse();
    private bool isAdmin = false;
    private bool importTriggeredAndNotFailed = false;
    private string searchText = string.Empty;
    private string currentUserUpn = string.Empty;
    private bool canRegularUsersViewAllRecords;
    private bool canRegularUsersViewAllStatistics;
    private bool canRegularUsersArchiveRecords;
    private bool canRegularUsersDeleteRecords;

    private bool showOnlyMyRecords
    {
        get => SharedStateService.ShowOnlyMyRecords;
        set => SharedStateService.ShowOnlyMyRecords = value;
    }

    private const string ShowOnlyMyRecordsKey = "showOnlyMyRecords";

    private string importConnectionString;
    private bool importInProgress = false;
    private bool isLoading = false;

    // Static property to remember if data has been loaded across page refreshes
    private static bool dataHasBeenLoadedBefore = false;

    // Remember the last loaded data to avoid unnecessary reloads
    private static List<ShortUrlEntity> cachedUrlList;

    private Dictionary<string, bool> ArchiveMenuStates = new Dictionary<string, bool>();

    private int? _pendingPageIndex = null;
    private double? _pendingScrollTop = null;

    private DotNetObjectReference<UrlManager> _dotNetRef;

    private bool _dialogOpen = false;
    private bool _suppressNextEsc = false;

    IQueryable<ShortUrlEntity> urlList;
    IQueryable<ShortUrlEntity> filteredUrlList;
    FluentDataGrid<ShortUrlEntity> _dataGrid;
    PaginationState pagination = new PaginationState { ItemsPerPage = 25 };
    ShortUrlRequest shortUrlRequest = new ShortUrlRequest();
    ShortUrlEntity editedUrl = new ShortUrlEntity();

    GridSort<ShortUrlEntity> sortByClicks = GridSort<ShortUrlEntity>.ByDescending(p => p.Clicks);
    GridSort<ShortUrlEntity> sortBySchedules = GridSort<ShortUrlEntity>.ByDescending(p => p.Schedules.Count);
    GridSort<ShortUrlEntity> sortByVanities = GridSort<ShortUrlEntity>.ByAscending(p => p.RowKey);
    GridSort<ShortUrlEntity> sortByTitle = GridSort<ShortUrlEntity>.ByAscending(p => p.Title);
    GridSort<ShortUrlEntity> sortByUrl = GridSort<ShortUrlEntity>.ByAscending(p => p.Url);

    [JSInvokable]
    public void OnEscPressed()
    {
        if (_suppressNextEsc)
        {
            _suppressNextEsc = false;
            return;
        }
        if (!_dialogOpen && !string.IsNullOrEmpty(searchText))
        {
            searchText = string.Empty;
            FilterUrls();
            StateHasChanged();
        }
    }

    protected override async Task OnInitializedAsync()
    {
        isAdmin = await userService.IsAdminAsync();
        currentUserUpn = await userService.GetUserPrincipalNameAsync();
        canRegularUsersViewAllRecords = userService.CanRegularUsersViewAllRecords();
        canRegularUsersViewAllStatistics = userService.CanRegularUsersViewAllStatistics();
        canRegularUsersArchiveRecords = userService.CanRegularUsersArchiveRecords();
        canRegularUsersDeleteRecords = userService.CanRegularUsersDeleteRecords();

        importConnectionString = Configuration["ImportTableStorageConnectionString"] ?? string.Empty;

        // Load persisted checkbox state from local storage
        try
        {
            var storedValue = await JSRuntime.InvokeAsync<string>("localStorage.getItem", ShowOnlyMyRecordsKey);
            if (!string.IsNullOrEmpty(storedValue) && bool.TryParse(storedValue, out var parsed))
            {
                SharedStateService.ShowOnlyMyRecords = parsed;
            }
        }
        catch (Exception) { }

        // Ensure initial data load if cache is empty
        if (cachedUrlList == null || cachedUrlList.Count == 0)
        {
            await RefreshGrid();
        }
        else
        {
            urlList = cachedUrlList.AsQueryable();
            FilterUrls();
        }
    }

    public async ValueTask DisposeAsync()
    {
        try
        {
            await JSRuntime.InvokeVoidAsync("unregisterEscKeyHandler");
        }
        catch (Exception)
        {
        }
        _dotNetRef?.Dispose();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                // If we have cached data, use it immediately and avoid the loading state
                if (dataHasBeenLoadedBefore && cachedUrlList != null && cachedUrlList.Count > 0)
                {
                    urlList = cachedUrlList.AsQueryable();
                    FilterUrls();
                    StateHasChanged();
                }
                // Register global ESC key handler only once, after first render
                if (_dotNetRef == null)
                {
                    _dotNetRef = DotNetObjectReference.Create(this);
                    await JSRuntime.InvokeVoidAsync("registerEscKeyHandler", _dotNetRef);
                }
            }
            catch (Exception) { }
        }

        await base.OnAfterRenderAsync(firstRender);
    }

    private async Task OnShowOnlyMyRecordsChanged()
    {
        // Persist the new value to local storage
        try
        {
            await JSRuntime.InvokeVoidAsync("localStorage.setItem", ShowOnlyMyRecordsKey, SharedStateService.ShowOnlyMyRecords.ToString().ToLowerInvariant());
        }
        catch { }
        FilterUrls(); 
    }

    private void OnSearchInput()
    {
        FilterUrls();
    }

    private async Task RefreshGrid(bool preservePage = false)
    {
        try
        {
            isLoading = true;
            StateHasChanged();

            // Save current page and scroll if needed
            if (preservePage && pagination != null)
            {
                _pendingPageIndex = pagination.CurrentPageIndex;
                _pendingScrollTop = await JSRuntime.InvokeAsync<double?>("getDataGridScrollTop", "grdUrls");
            }

            urlList = await urlManager.GetUrls();

            // Cache the data in a static field for future use
            if (urlList != null)
            {
                cachedUrlList = urlList.ToList();
            }

            FilterUrls(false); // Don't reset page here
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.ToString());
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
            // Restore page and scroll if needed
            if (preservePage && _pendingPageIndex.HasValue)
            {
                _ = pagination.SetCurrentPageIndexAsync(_pendingPageIndex.Value);
                _pendingPageIndex = null;
            }
            if (preservePage && _pendingScrollTop.HasValue)
            {
                await JSRuntime.InvokeVoidAsync("setDataGridScrollTop", "grdUrls", _pendingScrollTop.Value);
                _pendingScrollTop = null;
            }
        }
    }

    private async Task UpdateUIList()
    {
        await RefreshGrid(true); // preserve page and scroll
        StateHasChanged();
    }

    private void FilterUrls(bool resetPage = true)
    {
        if (urlList == null)
        {
            filteredUrlList = null;
            return;
        }

        // Start with all available URLs
        IQueryable<ShortUrlEntity> filtered = urlList;

        // Apply owner filter if checkbox is checked
        if (showOnlyMyRecords && !string.IsNullOrEmpty(currentUserUpn))
        {
            filtered = filtered.Where(url =>
                url.OwnerUpn != null &&
                url.OwnerUpn.Equals(currentUserUpn, StringComparison.OrdinalIgnoreCase));
        }

        // Then apply text search filter
        if (!string.IsNullOrWhiteSpace(searchText))
        {
            // Apply the filter based on searchText (case-insensitive)
            var searchTerm = searchText.Trim().ToLowerInvariant();
            filtered = filtered.Where(url =>
                (url.Title != null && url.Title.ToLowerInvariant().Contains(searchTerm)) ||
                (url.Vanity != null && url.Vanity.ToLowerInvariant().Contains(searchTerm)) ||
                (url.Url != null && url.Url.ToLowerInvariant().Contains(searchTerm)) ||
                (isAdmin && url.OwnerUpn != null && url.OwnerUpn.ToLowerInvariant().Contains(searchTerm))
            );
        }

        filteredUrlList = filtered;

        foreach (var record in filteredUrlList)
        {
            ArchiveMenuStates[record.RowKey] = false;
        }

        // Only reset pagination to first page when filtering/searching
        if (resetPage)
        {
            pagination.SetCurrentPageIndexAsync(0);
        }
    }

    private async Task CreateShortUrl()
    {
        var viewportWidth = await JSRuntime.InvokeAsync<int>("getViewportWidth");

        shortUrlRequest = new ShortUrlRequest();
        _dialogOpen = true;
        var dialog = await DialogService.ShowDialogAsync<NewUrlDialog>(shortUrlRequest, new DialogParameters()
        {
            Id = "NewUrlDialog",
            Title = "Create a new short URL record",
            PreventDismissOnOverlayClick = true,
            ShowDismiss = false,
            PreventScroll = true,
            TrapFocus = true,
            Width = viewportWidth > 600 ? "700px" : $"{viewportWidth}px",
        });

        var result = await dialog.Result;
        _dialogOpen = false;
        _suppressNextEsc = true;
        if (!result.Cancelled && result.Data != null)
        {
            var dialogData = (ShortUrlRequest)result.Data;
            var urlRequest = new ShortRequest
                {
                    Title = dialogData.Title ?? string.Empty,
                    Url = dialogData.Url,
                    Vanity = dialogData.Vanity,
                    Schedules = dialogData.Schedules.ToArray()
                };

            try
            {
                var existing = await urlManager.GetUrlByVanity(urlRequest.Vanity);
                if (existing != null)
                {
                    var isOwner = string.Equals(existing.OwnerUpn, currentUserUpn, StringComparison.OrdinalIgnoreCase);
                    var canArchive = isAdmin || (isOwner && canRegularUsersArchiveRecords);
                    if ((existing.IsArchived ?? false) && canArchive)
                    {
                        // Vanity exists but is archived, offer to reactivate
                        await ShowReactivateVanityDialog(urlRequest.Vanity, existing.OwnerUpn);
                        return;
                    }
                    else
                    {
                        toastService.ShowError("A short URL with this vanity already exists.");
                        return;
                    }
                }

                var response = await urlManager.UrlCreate(urlRequest);
                if (response.Item1)
                {
                    await UpdateUIList();
                    toastService.ShowSuccess("Short URL created successfully");
                }
                else
                {
                    toastService.ShowError(response.Item2);
                }
            }
            catch (Exception ex)
            {
                toastService.ShowError(ex.Message);
            }
        }
    }

    [Inject] public IJSRuntime JsRuntime { get; set; }
    public async Task CopyToClipboardAsync(string url)
    {
        if (JsRuntime == null)
        {
            return;
        }
        await JSRuntime.InvokeVoidAsync("clipboardCopy.copyText", url);
    }

    private async Task EditShortUrl(ShortUrlEntity urlEntity)
    {
        if (!isAdmin && !string.Equals(urlEntity.OwnerUpn, currentUserUpn, StringComparison.OrdinalIgnoreCase))
        {
            toastService.ShowError("You are not authorized to edit this URL");
            return;
        }

        var viewportWidth = await JSRuntime.InvokeAsync<int>("getViewportWidth");

        _dialogOpen = true;
        var dialog = await DialogService.ShowDialogAsync<UpdateUrlDialog>(urlEntity, new DialogParameters()
        {
            Id = "UpdateUrlDialog",
            Title = $"Update short URL record for '{urlEntity.Vanity}'",
            PreventDismissOnOverlayClick = true,
            ShowDismiss = false,
            PreventScroll = true,
            TrapFocus = true,
            Width = viewportWidth > 600 ? "700px" : $"{viewportWidth}px" 
        });

        var result = await dialog.Result;
        _dialogOpen = false;
        _suppressNextEsc = true;
        if (!result.Cancelled && result.Data != null)
        {
            if (result.Data is ShortUrlEntity dialogData)
            {
                var response = await urlManager.UrlUpdate(urlEntity);
                if (response != null)
                {
                    await UpdateUIList();
                    toastService.ShowSuccess("Short URL updated successfully");
                }
            }
            else if (result.Data is UpdateUrlDialog.RenameResult renameResult)
            {
                await RenameShortUrl(renameResult.OldEntity, renameResult.NewVanity);
            }
        }
    }

    private void NavigateToStats(string vanity)
    {
        NavigationManager.NavigateTo($"/Statistics/{vanity}");
    }

    public async Task ArchiveShortUrl(ShortUrlEntity urlEntity)
    {
        var isOwner = string.Equals(urlEntity.OwnerUpn, currentUserUpn, StringComparison.OrdinalIgnoreCase);

        if (!isAdmin && (!isOwner || !userService.CanRegularUsersArchiveRecords()))
        {
            if (!isOwner)
            {
                toastService.ShowError("You are not authorized to archive this URL because you didn't create it");
            }
            else
            {
                toastService.ShowError("Only administrators can archive URL records");
            }
            return;
        }

        var result = await urlManager.UrlArchive(urlEntity);
        if (result)
        {
            await UpdateUIList();
            toastService.ShowSuccess("Short URL archived successfully");
        }
        else
        {
            toastService.ShowError("Not authorized to archive this URL");
        }
    }

    private async Task ConfirmDeleteShortUrl(ShortUrlEntity urlEntity)
    {
        var parameters = new DeleteShortUrlDialog.DeleteShortUrlParameters
        {
            Message = $@"Deleting a short URL is not recommended. This will permanently remove the record from the system. 
Supposed-to-be stable URLs will be broken, and the same vanity could be reused for a completely different purpose, which may be misleading for users who have bookmarked or shared the original link."
        };
        _dialogOpen = true;
        var dialog = await DialogService.ShowDialogAsync<DeleteShortUrlDialog>(parameters, new DialogParameters
        {
            Id = "DeleteShortUrlDialog",
            Title = "Delete Short URL",
            PreventDismissOnOverlayClick = true,
            ShowDismiss = false,
            PreventScroll = true,
            TrapFocus = true
        });
        var result = await dialog.Result;
        _dialogOpen = false;
        _suppressNextEsc = true;
        if (!result.Cancelled && result.Data is bool proceed && proceed)
        {
            var deleteResult = await urlManager.UrlDelete(urlEntity);
            if (deleteResult)
            {
                await UpdateUIList();
                toastService.ShowSuccess("Short URL deleted successfully");
            }
            else
            {
                toastService.ShowError("Failed to delete short URL");
            }
        }
    }

    private async Task ShowReactivateVanityDialog(string vanity, string ownerUpn)
    {
        var parameters = new ReactivateVanityDialog.ReactivateVanityParameters
        {
            Vanity = vanity
        };
        _dialogOpen = true;
        var dialog = await DialogService.ShowDialogAsync<ReactivateVanityDialog>(parameters, new DialogParameters
        {
            Id = "ReactivateVanityDialog",
            Title = "Reactivate Archived Vanity",
            PreventDismissOnOverlayClick = true,
            ShowDismiss = false,
            PreventScroll = true,
            TrapFocus = true
        });
        var result = await dialog.Result;
        _dialogOpen = false;
        _suppressNextEsc = true;
        if (!result.Cancelled && result.Data is bool proceed && proceed)
        {
            await ReactivateVanity(vanity, ownerUpn);
        }
    }

    private async Task AddExampleData()
    {
        try
        {
            isLoading = true;
            importInProgress = true;
            StateHasChanged();

            // Example 1: GitHub
            var githubRequest = new ShortRequest
                {
                    Title = "GitHub",
                    Url = "https://github.com",
                    Vanity = "gh",
                    Schedules = Array.Empty<Schedule>()
                };

            // Example 2: Microsoft
            var microsoftRequest = new ShortRequest
                {
                    Title = "Microsoft",
                    Url = "https://microsoft.com",
                    Vanity = "ms",
                    Schedules = Array.Empty<Schedule>()
                };

            // Example 3: Stack Overflow
            var stackOverflowRequest = new ShortRequest
                {
                    Title = "Stack Overflow",
                    Url = "https://stackoverflow.com",
                    Vanity = "so",
                    Schedules = Array.Empty<Schedule>()
                };

            var examples = new[] { githubRequest, microsoftRequest, stackOverflowRequest };
            var successCount = 0;

            foreach (var example in examples)
            {
                try
                {
                    var response = await urlManager.UrlCreate(example);
                    if (response.Item1)
                    {
                        successCount++;
                    }
                }
                catch (Exception ex)
                {
                    Console.WriteLine($"Failed to create example {example.Vanity}: {ex.Message}");
                }
            }

            // Clear cache to force fresh reload
            cachedUrlList = null;
            dataHasBeenLoadedBefore = false;

            await UpdateUIList();
            toastService.ShowSuccess($"{successCount} example URLs created successfully");
        }
        catch (Exception ex)
        {
            toastService.ShowError($"Failed to create example data: {ex.Message}");
        }
        finally
        {
            isLoading = false;
            importInProgress = false;
            StateHasChanged();
        }
    }

    private async Task ImportRecords()
    {
        try
        {
            importInProgress = true;
            isLoading = true;
            StateHasChanged();

            toastService.ShowInfo("Importing records from the configured storage...");

            var importRequest = new ImportRequest
            {
                SourceConnectionString = importConnectionString,
                IncludeArchived = false,
                OverwriteExisting = false
            };

            var response = await urlManager.Import(importRequest);

            if (!response.Success)
            {
                var errorMessage = $"Import failed. URLs imported: {response.UrlsImported}, " +
                    $"ClickStats imported: {response.ClickStatsImported}, " +
                    $"Failed: {response.RecordsFailed}";

                if (response.Errors.Any())
                {
                    errorMessage += $". Errors: {string.Join("; ", response.Errors.Take(3))}";
                    if (response.Errors.Count > 3)
                    {
                        errorMessage += $" (and {response.Errors.Count - 3} more)";
                    }
                }

                toastService.ShowError(errorMessage);
            }
            else {
                if (response.Errors.Count > 0 && response.Errors[0].Contains("going on")) {
                    toastService.ShowInfo("Import is still going on in the background...");
                }
                importTriggeredAndNotFailed = true;
            }

            // Clear cache to force fresh reload
            cachedUrlList = null;
            dataHasBeenLoadedBefore = false;

            await RefreshGrid();
        }
        catch (Exception ex)
        {
            toastService.ShowError($"Import failed: {ex.Message}");
        }
        finally
        {
            isLoading = false;
            importInProgress = false;
            StateHasChanged();
        }
    }

    public async Task RenameShortUrl(ShortUrlEntity oldEntity, string newVanity)
    {
        var isOwner = string.Equals(oldEntity.OwnerUpn, currentUserUpn, StringComparison.OrdinalIgnoreCase);
        if (!isAdmin && (!isOwner || !canRegularUsersDeleteRecords))
        {
            if (!isOwner)
            {
                toastService.ShowError("You are not authorized to rename this URL because you didn't create it");
            }
            else
            {
                toastService.ShowError("Only administrators can rename URL records");
            }
            return;
        }
        var clone = await urlManager.UrlClone(oldEntity, newVanity);
        if (clone != null)
        {
            await urlManager.UrlDelete(oldEntity);
            await UpdateUIList();
            toastService.ShowSuccess($"Short URL renamed to '{newVanity}'");
        }
        else
        {
            toastService.ShowError("Failed to rename short URL");
        }
    }

    private async Task ReactivateVanity(string vanity, string ownerUpn)
    {
        var entity = await urlManager.UrlReactivate(vanity, ownerUpn);
        if (entity != null)
        {
            await UpdateUIList();
            toastService.ShowSuccess($"Vanity '{vanity}' reactivated successfully");
        }
        else
        {
            toastService.ShowError($"Failed to reactivate vanity '{vanity}'");
        }
    }

    private async Task ManualRefresh()
    {
        await RefreshGrid(true); // preserve page and scroll
        toastService.ShowInfo("URL list refreshed");
    }
}
