@using AzUrlShortener.Core.Domain
@using AzUrlShortener.AdminUI
@using AzUrlShortener.AdminUI.Components
@using AzUrlShortener.AdminUI.Components.Shared
@using AzUrlShortener.AdminUI.Services
@using Microsoft.FluentUI.AspNetCore.Components.Components.Tooltip
@using System.Text.RegularExpressions
@implements IDialogContentComponent<ShortUrlEntity>
@inject UserService userService
@inject IDialogService DialogService
@inject IJSRuntime JSRuntime

@rendermode InteractiveServer

<div tabindex="-1" onkeydown:window="@HandleKeyDown">

<FluentDialogHeader ShowDismiss="false" TabIndex="-1">
    <FluentStack VerticalAlignment="VerticalAlignment.Center">
        <FluentIcon Value="@(new Icons.Regular.Size24.WindowApps())" />
        <FluentLabel Typo="Typography.PaneHeader">
            @Dialog!.Instance.Parameters.Title
        </FluentLabel>
    </FluentStack>
</FluentDialogHeader>

<FluentDialogBody>
    <EditForm Model="@_shortUrl" FormName="updateUrlForm" onkeydown="@HandleKeyDown">
        <DataAnnotationsValidator />

        <FluentStack Orientation="Orientation.Vertical" VerticalGapGap="10"  Width="100%">

            <div style="width: 100%;">
                <FluentTextField @ref="_titleInput" Name="Title" Label="Title" @bind-Value="_shortUrl.Title" Immediate="true" ImmediateDelay="250" Required="true" style="width: 100%;" />
                <FluentValidationMessage For="@(() => _shortUrl.Title)" />
            </div>

            <div style="width: 100%;">
                <FluentTextField Name="Url" Label="Url" @bind-Value="_shortUrl.Url" Immediate="true" ImmediateDelay="250" Required="true" style="width: 100%;" />
                <FluentValidationMessage For="@(() => _shortUrl.Url)" />
            </div>

            <div style="width: 100%;">
                <FluentTextField Id="Vanity" Name="Vanity" Label="Vanity" @bind-Value="_shortUrl.Vanity" ReadOnly="true" Disabled="true" style="width: 100%;" />
                <FluentTooltip Anchor="Vanity">
                    The vanity is the ID of the short URL and cannot be changed.
                </FluentTooltip>
            </div>

            @if (_isAdmin)
            {
                <div style="width: 100%;">
                    <FluentTextField Id="OwnerUpn" Name="OwnerUpn" Label="Owner UPN" @bind-Value="_shortUrl.OwnerUpn" Immediate="true" ImmediateDelay="250" style="width: 100%;" />
                    <FluentTooltip Anchor="OwnerUpn">
                        User Principal Name of the URL owner. Only administrator can change this.
                    </FluentTooltip>
                </div>
            }

            <div>
                <SchedulesComponent Schedules="_editableSchedules" 
                                    OnEdit="OnSchedulesEdit" />
            </div>

        </FluentStack>
    </EditForm>
</FluentDialogBody>

<FluentDialogFooter>
    <FluentStack Orientation="Orientation.Horizontal" HorizontalAlignment="HorizontalAlignment.SpaceBetween" Style="width: 100%;">
        <div id="rename-button">
            <FluentButton Appearance="Appearance.Neutral" Disabled="@(!_canRenameRecord)" OnClick="@ShowRenameDialog">Rename</FluentButton>
            @if (!_canRenameRecord)
            {
                <FluentTooltip Anchor="rename-button">
                    Only administrators can rename URL records
                </FluentTooltip>
            }
        </div>
        <FluentStack Orientation="Orientation.Horizontal" HorizontalAlignment="HorizontalAlignment.Right" Style="gap: 0.5rem;">
            <FluentButton Appearance="Appearance.Accent" Disabled="@(!_shortUrl.Validate() || HasInvalidInput())" OnClick="@SaveAsync">Save</FluentButton>
            <FluentButton Appearance="Appearance.Neutral" OnClick="@CancelAsync">Cancel</FluentButton>
        </FluentStack>
    </FluentStack>
</FluentDialogFooter>

</div>

@code {
    [Parameter]
    public ShortUrlEntity Content { get; set; } = default!;

    [CascadingParameter]
    public FluentDialog Dialog { get; set; } = default!;

    public class RenameResult
    {
        public bool IsRename { get; set; }
        public string NewVanity { get; set; }
        public ShortUrlEntity OldEntity { get; set; }
    }

    private ShortUrlEntity _shortUrl = new ShortUrlEntity();
    private FluentTextField _titleInput = default!;
    private bool hasFocused;
    private bool _isAdmin = false;
    private bool _isOwner = false;
    private bool _canRegularUsersDeleteRecords = false;
    private bool _canRenameRecord = false;
    private List<Schedule> _originalSchedules = new();
    private List<Schedule> _editableSchedules = new();
    private static bool _isOtherDialogOpen = false;

    private Schedule DeepCopySchedule(Schedule s)
    {
        return new Schedule {
            Id = s.Id,
            Start = s.Start,
            End = s.End,
            Cron = s.Cron,
            DurationMinutes = s.DurationMinutes,
            AlternativeUrl = s.AlternativeUrl
            // Add deep copy for any reference-type properties here if needed
        };
    }

    protected override async Task OnInitializedAsync()
    {
        _shortUrl = Content;

        // Store original schedules in _originalSchedules with deep copy
        _originalSchedules = _shortUrl.Schedules?.Select(DeepCopySchedule).ToList() ?? new List<Schedule>();

        // Create a separate editable list for the UI
        _editableSchedules = _shortUrl.Schedules?.Select(DeepCopySchedule).ToList() ?? new List<Schedule>();

        // Initialize schedule lists if null
        if (_shortUrl.Schedules == null)
            _shortUrl.Schedules = new List<Schedule>();

        _isAdmin = await userService.IsAdminAsync();
        _isOwner = _shortUrl.OwnerUpn == await userService.GetUserPrincipalNameAsync();
        _canRegularUsersDeleteRecords = userService.CanRegularUsersDeleteRecords();
        _canRenameRecord = _isAdmin || (_isOwner && _canRegularUsersDeleteRecords);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && !hasFocused && !_isOtherDialogOpen)
        {
            hasFocused = true;
            _titleInput?.FocusAsync();
        }

        await base.OnAfterRenderAsync(firstRender);
    }

    private void ToggleDialogPrimaryActionButton(bool enable)
    {
        Dialog!.TogglePrimaryActionButton(enable);
    }

    private async Task SaveAsync()
    {
        if (_shortUrl.Validate() && !HasInvalidInput())
        {
            // Copy the edited schedules back to the _shortUrl
            _shortUrl.Schedules = _editableSchedules.Select(DeepCopySchedule).ToList();
            await Dialog!.CloseAsync(_shortUrl);
        }
    }

    private async Task CancelAsync()
    {
        // No need to update _shortUrl.Schedules as we'll discard the whole dialog
        await Dialog!.CancelAsync();
    }

    private async Task HandleKeyDown(KeyboardEventArgs e)
    {
        if (e.Key == "Enter" && _shortUrl.Validate())
        {
            await SaveAsync();
        }
        if (e.Key == "Escape")
        {
            await CancelAsync();
        }
    }

    private void OnSchedulesEdit()
    {
        StateHasChanged();
    }

    private bool HasInvalidInput() {
        return _editableSchedules != null && 
            _editableSchedules.Any(s => 
                !Regex.Match(s.AlternativeUrl, "^http[s]*://[0-9a-zA-Z]+.*", RegexOptions.IgnoreCase).Success
                || !IsValidCron(s.Cron)
                || s.DurationMinutes <= 0
            );
    }

    private bool HasDuplicateInList(string value)
    {
        if (string.IsNullOrWhiteSpace(value) || value == "*") return false;
        var parts = value.Split(',').Select(p => p.Trim()).Where(p => p != "*");
        return parts.GroupBy(x => x).Any(g => g.Count() > 1);
    }

    private bool IsValidCron(string cron)
    {
        if (string.IsNullOrWhiteSpace(cron)) return false;
        try
        {
            // Accept only 5-part cron expressions
            var parts = cron.Trim().Split(' ', StringSplitOptions.RemoveEmptyEntries);
            if (parts.Length != 5) return false;
            // Check for duplicates in day-of-month and month fields
            if (HasDuplicateInList(parts[2]) || HasDuplicateInList(parts[3])) return false;
            Cronos.CronExpression.Parse(cron);
            return true;
        }
        catch
        {
            return false;
        }
    }

    private async Task ShowRenameDialog()
    {
        var parameters = new RenameConfirmDialog.RenameVanityParameters
        {
            Vanity = _shortUrl.Vanity
        };

        try
        {
            await JSRuntime.InvokeVoidAsync("disableFluentDialogFocusTrap", "UpdateUrlDialog");
            _isOtherDialogOpen = true;

            var dialog = await DialogService.ShowDialogAsync<RenameConfirmDialog>(parameters, new DialogParameters
            {
                Id = "RenameConfirmDialog",
                Title = "Rename Vanity",
                PreventDismissOnOverlayClick = true,
                ShowDismiss = false,
                PreventScroll = true,
                TrapFocus = true
            });
            var result = await dialog.Result;

            await JSRuntime.InvokeVoidAsync("enableFluentDialogFocusTrap", "UpdateUrlDialog");

            if (!result.Cancelled && result.Data is string newVanity)
            {
                if (!string.IsNullOrWhiteSpace(newVanity))
                {
                    var renameResult = new RenameResult { IsRename = true, NewVanity = newVanity, OldEntity = _shortUrl };
                    await Dialog!.CloseAsync(renameResult);
                }
                else
                {
                    await Dialog!.CancelAsync();
                }
            }
        }
        finally
        {
            _isOtherDialogOpen = false;
        }
    }
}
