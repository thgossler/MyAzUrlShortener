@using AzUrlShortener.Core.Messages
@using AzUrlShortener.AdminUI
@using AzUrlShortener.AdminUI.Components
@using AzUrlShortener.AdminUI.Components.Shared
@using AzUrlShortener.AdminUI.Services
@using AzUrlShortener.Core.Domain
@using System.Text.RegularExpressions
@implements IDialogContentComponent<ShortUrlRequest>

@rendermode InteractiveServer

<FluentDialogHeader ShowDismiss="false" TabIndex="-1">
    <FluentStack VerticalAlignment="VerticalAlignment.Center">
        <FluentIcon Value="@(new Icons.Regular.Size24.WindowApps())" />
        <FluentLabel Typo="Typography.PaneHeader">
            @Dialog!.Instance.Parameters.Title
        </FluentLabel>
    </FluentStack>
</FluentDialogHeader>

<FluentDialogBody>
    <EditForm Model="@_shortUrl" FormName="new_note" onkeydown="@HandleKeyDown">
        <DataAnnotationsValidator />

        <FluentStack Orientation="Orientation.Vertical" VerticalGapGap="10"  Width="100%">

            <div style="width: 100%;">
                <FluentTextField @ref="_titleInput" Name="Title" Label="Title" @bind-Value="_shortUrl.Title" Immediate="true" ImmediateDelay="@delay" Required="true" style="width: 100%;" />
                <FluentValidationMessage For="@(() => _shortUrl.Title)" />
            </div>

            <div style="width: 100%;">
                <FluentTextField Name="Url" Label="Url" @bind-Value="_shortUrl.Url" Immediate="true" ImmediateDelay="@delay" Required="true" style="width: 100%;" />
                <FluentValidationMessage For="@(() => _shortUrl.Url)" />
            </div>

            <div style="width: 100%;">
                <FluentTextField Name="Vanity" Label="Vanity" @bind-Value="_shortUrl.Vanity" Immediate="true" ImmediateDelay="@delay" Required="true" style="width: 100%;" />
                <FluentValidationMessage For="@(() => _shortUrl.Vanity)" />
            </div>

            <div style="width: 100%;">
                <SchedulesComponent Schedules="_editableSchedules" 
                                   OnEdit="OnSchedulesEdit" />
            </div>

        </FluentStack>

    </EditForm>

</FluentDialogBody>

<FluentDialogFooter>
    <FluentButton Appearance="Appearance.Accent" Disabled="@(!_shortUrl.Validate() || HasInvalidInput())" OnClick="@SaveAsync">Save</FluentButton>
    <FluentButton Appearance="Appearance.Neutral" OnClick="@CancelAsync">Cancel</FluentButton>
</FluentDialogFooter>


@code {
    [Parameter]
    public ShortUrlRequest Content { get; set; } = default!;

    [CascadingParameter]
    public FluentDialog Dialog { get; set; } = default!;

    private ShortUrlRequest _shortUrl = new ShortUrlRequest();
    private FluentTextField _titleInput = default!;
    private List<Schedule> _originalSchedules = new();
    private List<Schedule> _editableSchedules = new();
    private bool hasFocused;
    private int delay = 500;
    
    // Store the original TrapFocus value
    private bool? _originalTrapFocus;

    private Schedule DeepCopySchedule(Schedule s)
    {
        return new Schedule {
            Id = s.Id,
            Start = s.Start,
            End = s.End,
            Cron = s.Cron,
            DurationMinutes = s.DurationMinutes,
            AlternativeUrl = s.AlternativeUrl
            // Add deep copy for any reference-type properties here if needed
        };
    }

    protected override void OnInitialized()
    {
        _shortUrl = Content;
        
        // Deep copy original schedules
        _originalSchedules = _shortUrl.Schedules?.Select(DeepCopySchedule).ToList() ?? new List<Schedule>();
        
        // Create a separate editable list for the UI
        _editableSchedules = _shortUrl.Schedules?.Select(DeepCopySchedule).ToList() ?? new List<Schedule>();
        
        if (_shortUrl.Schedules == null)
            _shortUrl.Schedules = new List<Schedule>();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && !hasFocused)
        {
            hasFocused = true;
            _titleInput?.FocusAsync();
        }
    }

    private void ToggleDialogPrimaryActionButton(bool enable)
    {
        Dialog!.TogglePrimaryActionButton(enable);
    }
    
    private async Task SaveAsync()
    {
        if (_shortUrl.Validate() && !HasInvalidInput())
        {
            // Copy the edited schedules back to the _shortUrl
            _shortUrl.Schedules = _editableSchedules.Select(DeepCopySchedule).ToList();
            await Dialog!.CloseAsync(_shortUrl);
        }
    }

    private async Task CancelAsync()
    {
        // No need to update _shortUrl.Schedules as we'll discard the whole dialog
        await Dialog!.CancelAsync();
    }

    private async Task HandleKeyDown(KeyboardEventArgs e)
    {
        if (e.Key == "Enter" && _shortUrl.Validate())
        {
            await SaveAsync();
        }
        if (e.Key == "Escape")
        {
            await CancelAsync();
        }
    }

    private void OnSchedulesEdit()
    {
        StateHasChanged();
    }

    private bool HasInvalidInput()
    {
        return _editableSchedules != null &&
            _editableSchedules.Any(s =>
                !Regex.Match(s.AlternativeUrl, "^http[s]://[0-9a-zA-Z]+.*", RegexOptions.IgnoreCase).Success
                || !IsValidCron(s.Cron)
                || s.DurationMinutes <= 0
            );
    }

    private bool IsValidCron(string cron)
    {
        if (string.IsNullOrWhiteSpace(cron)) return false;
        try
        {
            // Accept only 5-part cron expressions
            var parts = cron.Trim().Split(' ', StringSplitOptions.RemoveEmptyEntries);
            if (parts.Length != 5) return false;
            Cronos.CronExpression.Parse(cron);
            return true;
        }
        catch
        {
            return false;
        }
    }
}
