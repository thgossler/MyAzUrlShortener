@using Microsoft.FluentUI.AspNetCore.Components
@using AzUrlShortener.AdminUI.Components.Shared
@implements IDialogContentComponent<CronEditorDialogParameters>
@inject IJSRuntime JS

<div tabindex="0" onkeydown:window="HandleDialogKeyDown">
    <FluentDialog>
        <FluentDialogHeader ShowDismiss="false" TabIndex="-1">
            <FluentStack VerticalAlignment="VerticalAlignment.Center">
                <FluentIcon Value="@(new Icons.Regular.Size24.WindowApps())" />
                <FluentLabel Typo="Typography.PaneHeader">
                    @Dialog?.Instance?.Parameters?.Title
                </FluentLabel>
            </FluentStack>
        </FluentDialogHeader>

        <div class="cron-editor-dialog">
            <div style="width: 100%; padding: 10px;">
                <CrontabEditorComponent @ref="cronEditor" />
            </div>

            <FluentDialogFooter>
                <FluentButton Appearance="Appearance.Accent" OnClick="@SaveAsync">OK</FluentButton>
                <FluentButton Appearance="Appearance.Neutral" OnClick="@CancelAsync">Cancel</FluentButton>
            </FluentDialogFooter>
        </div>
    </FluentDialog>
</div>

@code {
    [CascadingParameter]
    public FluentDialog Dialog { get; set; } = default!;

    [Parameter]
    public CronEditorDialogParameters Content { get; set; } = default!;

    private CrontabEditorComponent cronEditor;
    private string originalCronExpression = string.Empty;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && cronEditor != null)
        {
            if (!string.IsNullOrWhiteSpace(Content.CronExpression))
            {
                originalCronExpression = Content.CronExpression;

                var parts = Content.CronExpression.Split(' ', StringSplitOptions.RemoveEmptyEntries);
                if (parts.Length >= 5)
                {
                    await cronEditor.InitializeWithCronExpression(parts[0], parts[1], parts[2], parts[3], parts[4]);
                }
            }
            else
            {
                // If there's no initial expression, we still need to set focus
                await cronEditor.SetInitialInputFocusAsync();
            }
        }

        await base.OnAfterRenderAsync(firstRender);
    }

    private async Task HandleKeyDown(KeyboardEventArgs args)
    {
        if (args.Key == "Escape")
        {
            await CancelAsync();
        }
        else if (args.Key == "Enter" && !args.ShiftKey && !args.CtrlKey && !args.AltKey)
        {
            await SaveAsync();
        }
    }

    private async void HandleDialogKeyDown(KeyboardEventArgs args)
    {
        if (args.Key == "Escape")
        {
            await CancelAsync();
        }
        else if (args.Key == "Enter" && !args.ShiftKey && !args.CtrlKey && !args.AltKey)
        {
            await SaveAsync();
        }
    }

    public async Task<CronEditorDialogParameters> SaveAsync()
    {
        if (cronEditor != null)
        {
            // Instead of calling OnSave directly, store the expression in the Content object
            // that will be returned to the caller
            Content.CronExpression = cronEditor.CrontabExpression;
            
            // If OnSave callback is provided, also call it (for backward compatibility)
            if (Content.OnSave != null)
            {
                Content.OnSave(cronEditor.CrontabExpression);
            }
        }

        await Dialog.CloseAsync(Content);
        return Content;
    }

    public async Task CancelAsync()
    {
        // We don't modify Content when cancelling
        await Dialog.CancelAsync();
    }
}
