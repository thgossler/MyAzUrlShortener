@using AzUrlShortener.Core.Messages
@using AzUrlShortener.TinyBlazorAdmin
@using AzUrlShortener.TinyBlazorAdmin.Components
@using AzUrlShortener.TinyBlazorAdmin.Components.Shared
@using AzUrlShortener.TinyBlazorAdmin.Services
@implements IDialogContentComponent<ShortUrlRequest>

@rendermode InteractiveServer

<FluentDialogHeader ShowDismiss="true">
    <FluentStack VerticalAlignment="VerticalAlignment.Center">
        <FluentIcon Value="@(new Icons.Regular.Size24.WindowApps())" />
        <FluentLabel Typo="Typography.PaneHeader">
            @Dialog!.Instance.Parameters.Title
        </FluentLabel>
    </FluentStack>
</FluentDialogHeader>

<FluentDialogBody>
    <EditForm Model="@_shortUrl" FormName="new_note" onkeydown="@HandleKeyDown">
        <DataAnnotationsValidator />

        <FluentStack Orientation="Orientation.Vertical" VerticalGapGap="10"  Width="100%">

            <div style="width: 100%;">
                <FluentTextField @ref="_titleInput" Name="Title" Label="Title" @bind-Value="_shortUrl.Title" Immediate="true" ImmediateDelay="@delay" Required="true" style="width: 100%;" />
                <FluentValidationMessage For="@(() => _shortUrl.Title)" />
            </div>

            <div style="width: 100%;">
                <FluentTextField Name="Url" Label="Url" @bind-Value="_shortUrl.Url" Immediate="true" ImmediateDelay="@delay" Required="true" style="width: 100%;" />
                <FluentValidationMessage For="@(() => _shortUrl.Url)" />
            </div>

            <div style="width: 100%;">
                <FluentTextField Name="Vanity" Label="Vanity" @bind-Value="_shortUrl.Vanity" Immediate="true" ImmediateDelay="@delay" Required="true" style="width: 100%;" />
                <FluentValidationMessage For="@(() => _shortUrl.Vanity)" />
            </div>

            <div style="width: 100%;">
                <SchedulesComponent Schedules="_shortUrl.Schedules"></SchedulesComponent>
            </div>

        </FluentStack>

    </EditForm>

</FluentDialogBody>

<FluentDialogFooter>
    <FluentButton Appearance="Appearance.Accent" Disabled="@(!_shortUrl.Validate())" OnClick="@SaveAsync">Save</FluentButton>
    <FluentButton Appearance="Appearance.Neutral" OnClick="@CancelAsync">Cancel</FluentButton>
</FluentDialogFooter>


@code {
    [Parameter]
    public ShortUrlRequest Content { get; set; } = default!;

    [CascadingParameter]
    public FluentDialog Dialog { get; set; } = default!;

    private ShortUrlRequest _shortUrl = new ShortUrlRequest();
    private FluentTextField _titleInput = default!;
    private bool hasFocused;
    private int delay = 500;

    protected override void OnInitialized()
    {
        _shortUrl = Content;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && !hasFocused)
        {
            hasFocused = true;
            _titleInput?.FocusAsync();
        }
    }

    private void ToggleDialogPrimaryActionButton(bool enable)
    {
        Dialog!.TogglePrimaryActionButton(enable);
    }

	private async Task SaveAsync()
    {
        if (_shortUrl.Validate())
		{
			await Dialog!.CloseAsync(_shortUrl);
		}
    }

    private async Task CancelAsync()
    {
        await Dialog!.CancelAsync();
    }

    private async Task HandleKeyDown(KeyboardEventArgs e)
    {
        if (e.Key == "Enter" && _shortUrl.Validate())
        {
            await SaveAsync();
        }
        if (e.Key == "Escape")
        {
            await CancelAsync();
        }
    }
}
