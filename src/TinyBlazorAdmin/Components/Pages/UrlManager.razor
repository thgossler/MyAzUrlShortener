@page "/urlmanager"

@using System.Net
@using AzUrlShortener.Core.Domain
@using AzUrlShortener.Core.Messages
@using AzUrlShortener.TinyBlazorAdmin
@using AzUrlShortener.TinyBlazorAdmin.Components
@using AzUrlShortener.TinyBlazorAdmin.Components.Dialogues
@using AzUrlShortener.TinyBlazorAdmin.Services
@inject UrlManagerClient urlManager
@inject UserService userService
@inject IJSRuntime JSRuntime
@inject IDialogService DialogService
@inject IToastService toastService
@inject NavigationManager NavigationManager

@rendermode InteractiveServer

<PageTitle>Short URL Manager</PageTitle>

<div class="page-container">
    <div class="header-section">
        <h1>Manage URLs</h1>
        <h4>Add, edit and archive URL records</h4>

        <div class="actions-row">
            <FluentButton OnClick="@(CreateShortUrl)" Appearance="Appearance.Accent" IconStart="@(new Icons.Regular.Size16.Add())">Add</FluentButton>

            <div class="search-container">
                <FluentSearch Placeholder="Filter..."
                              @bind-Value="searchText"
                              @bind-Value:after="OnSearchInput"
                              Immediate="true"
                              ImmediateDelay="500"
                              Icon="@(new Icons.Regular.Size16.Search())" />
            </div>
        </div>
    </div>

    @if (!isAdmin)
    {
        <div class="info-banner">
            <FluentIcon Value="@(new Icons.Regular.Size16.Info())" Color="@Color.Accent" />
            You are viewing only URLs you have created.
        </div>
    }

    <div class="grid-container">
        <FluentDataGrid Id="grdUrls"
                        Items="@filteredUrlList"
                        ResizableColumns=true
                        GridTemplateColumns="60px auto auto auto auto 120px 120px 120px"
                        AutoFitColumns=true
                        AllowSorting=true
                        Pagination="@pagination"
                        RowSize="DataGridRowSize.Medium"
                        ShowHover=true>
            <ChildContent>
                <TemplateColumn Sortable="false">
                    <FluentButton OnClick="@(async () => await CopyToClipboardAsync(context!.ShortUrl))" IconEnd="@(new Icons.Regular.Size16.Copy())" Title="Copy" />
                </TemplateColumn>
                <TemplateColumn Title="Vanity" Sortable="true" SortBy="@sortByVanities" Style="min-width: 100px">
                    <FluentAnchor Href="@context!.ShortUrl" Target="_blank" Appearance="Appearance.Hypertext">@context!.Vanity</FluentAnchor>
                </TemplateColumn>
                <PropertyColumn Title="Title" Property="@(c => c!.Title)" Sortable="true" Style="min-width: 130px" />
                <PropertyColumn Title="Url" Property="@(c => c!.Url)" Sortable="true" Style="min-width: 150px" />
                @if (isAdmin)
                {
                    <PropertyColumn Title="Owner" Property="@(c => c!.OwnerUpn)" Sortable="true" Style="min-width: 130px" />
                }
                <TemplateColumn Title="Schedule(s)" Sortable="true" SortBy="@sortBySchedules">
                    @(context!.Schedules?.Count ?? 0)
                </TemplateColumn>
                <TemplateColumn Title="Clicks" Align="Align.End" Sortable="true" SortBy="@sortByClicks">
                    <FluentStack Orientation="Orientation.Horizontal" VerticalAlignment="VerticalAlignment.Center">
                        @context.Clicks
                        <FluentButton OnClick="@(() => NavigateToStats(context.RowKey))" IconEnd="@(new Icons.Regular.Size16.ChartMultiple())" />
                    </FluentStack>
                </TemplateColumn>
                <TemplateColumn Sortable="false">
                    <FluentButton OnClick="@(() => EditShortUrl(context))" IconEnd="@(new Icons.Regular.Size16.Edit())" Title="Edit" />
                    <FluentButton OnClick="@(async () => await ArchiveShortUrl(context))" IconEnd="@(new Icons.Regular.Size16.Archive())" Title="Archive" />
                </TemplateColumn>
            </ChildContent>
            <EmptyContent>
                <FluentIcon Value="@(new Icons.Filled.Size16.Info())" Color="@Color.Accent" />&nbsp; No short URLs found.
            </EmptyContent>
        </FluentDataGrid>
    </div>

    <div class="paginator-container">
        <FluentPaginator State="@pagination" />
    </div>
</div>

<style>
    .page-container {
        display: flex;
        flex-direction: column;
        height: calc(100vh - 100px);
        width: 100%;
        margin: 0;
        padding: 0;
    }

    .header-section {
        flex: 0 0 auto;
        margin-bottom: 1rem;
    }

    .grid-container {
        flex: 1 1 auto;
        overflow: auto;
        width: 100%;
        position: relative;
        min-height: 300px;
    }

    .paginator-container {
        flex: 0 0 auto;
        margin-top: 1rem;
    }

    .actions-row {
        display: flex;
        gap: 10px;
        flex-wrap: wrap;
        align-items: center;
        margin-bottom: 12px;
    }

    .search-container {
        min-width: 250px;
        margin-left: auto;
    }

    ::deep .fluent-data-grid {
        height: 100%;
        width: 100%;
    }

    ::deep .fluent-data-grid-row {
        width: 100%;
    }

    @@media (max-height: 600px) {
        .page-container {
            height: calc(100vh - 50px);
        }
    }

    .info-banner {
        background-color: #6699ff;
        padding: 8px 16px;
        border-radius: 4px;
        margin-bottom: 12px;
        display: flex;
        align-items: center;
        gap: 8px;
    }
</style>

@code {
    private ListResponse urls = new ListResponse();
    private bool isAdmin = false;
    private string searchText = string.Empty;

    IQueryable<ShortUrlEntity> urlList;
    IQueryable<ShortUrlEntity> filteredUrlList;
    PaginationState pagination = new PaginationState { ItemsPerPage = 50 };
    ShortUrlRequest shortUrlRequest = new ShortUrlRequest();
    ShortUrlEntity editedUrl = new ShortUrlEntity();
    public List<ShortUrlEntity> gridData { get; set; } = new List<ShortUrlEntity>();

    GridSort<ShortUrlEntity> sortByClicks = GridSort<ShortUrlEntity>.ByDescending(p => p.Clicks);
    GridSort<ShortUrlEntity> sortBySchedules = GridSort<ShortUrlEntity>.ByDescending(p => p.Schedules.Count);
    GridSort<ShortUrlEntity> sortByVanities = GridSort<ShortUrlEntity>.ByAscending(p => p.RowKey);

    protected override async Task OnInitializedAsync()
    {
        isAdmin = await userService.IsAdminAsync();
        await RefreshGrid();
    }

    private void OnSearchInput()
    {
        FilterUrls();
    }

    private async Task RefreshGrid()
    {
        try
        {
            urlList = await urlManager.GetUrls();
            FilterUrls();
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.ToString());
        }
    }

    private void FilterUrls()
    {
        if (urlList == null)
        {
            filteredUrlList = null;
            return;
        }

        if (string.IsNullOrWhiteSpace(searchText))
        {
            // If search is empty, show all URLs
            filteredUrlList = urlList;
        }
        else
        {
            // Apply the filter based on searchText (case-insensitive)
            var searchTerm = searchText.Trim().ToLowerInvariant();
            filteredUrlList = urlList.Where(url =>
                (url.Title != null && url.Title.ToLowerInvariant().Contains(searchTerm)) ||
                (url.Vanity != null && url.Vanity.ToLowerInvariant().Contains(searchTerm)) ||
                (url.Url != null && url.Url.ToLowerInvariant().Contains(searchTerm))
            );
        }

        // Reset pagination to first page when filtering
        pagination.SetCurrentPageIndexAsync(0);
        StateHasChanged();
    }

    private async Task UpdateUIList()
    {
        await RefreshGrid();
        StateHasChanged();
    }

    private async Task CreateShortUrl()
    {
        shortUrlRequest = new ShortUrlRequest();
        var dialog = await DialogService.ShowDialogAsync<NewUrlDialog>(shortUrlRequest, new DialogParameters()
            {
                Title = "Create a new Short Url",
                PreventDismissOnOverlayClick = true,
                PreventScroll = true,
                Width = "600px"
            });

        var result = await dialog.Result;
        if (!result.Cancelled && result.Data != null)
        {
            var dialogData = (ShortUrlRequest)result.Data;

            var urlRequest = new ShortRequest
                {
                    Title = dialogData.Title ?? string.Empty,
                    Url = dialogData.Url,
                    Vanity = dialogData.Vanity,
                    Schedules = dialogData.Schedules.ToArray()
                };

            try
            {
                var response = await urlManager.UrlCreate(urlRequest);
                if (response.Item1)
                {
                    await UpdateUIList();
                    toastService.ShowSuccess("Short URL created successfully");
                }
                else
                {
                    toastService.ShowError(response.Item2);
                }
            }
            catch (Exception ex)
            {
                toastService.ShowError(ex.Message);
            }
        }
    }

    [Inject] public IJSRuntime JsRuntime { get; set; }
    public async Task CopyToClipboardAsync(string url)
    {
        if (JsRuntime == null)
        {
            return;
        }
        await JSRuntime.InvokeVoidAsync("clipboardCopy.copyText", url);
    }

    private async Task EditShortUrl(ShortUrlEntity urlEntity)
    {
        var dialog = await DialogService.ShowDialogAsync<UpdateUrlDialog>(urlEntity, new DialogParameters()
            {
                Title = $"Update Url: {urlEntity.RowKey}",
                PreventDismissOnOverlayClick = true,
                PreventScroll = true,
                Width = "600px"
            });

        var result = await dialog.Result;
        if (!result.Cancelled && result.Data != null)
        {
            var dialogData = (ShortUrlEntity)result.Data;

            var response = await urlManager.UrlUpdate(urlEntity);
            if (response != null)
            {
                await UpdateUIList();
                toastService.ShowSuccess("Short URL updated successfully");
            }
        }
    }

    private void NavigateToStats(string vanity)
    {
        NavigationManager.NavigateTo("/Statistics/" + vanity);
    }

    public async Task ArchiveShortUrl(ShortUrlEntity urlEntity)
    {
        var result = await urlManager.UrlArchive(urlEntity);
        if (result)
        {
            await UpdateUIList();
            toastService.ShowSuccess("Short URL archived successfully");
        }
        else
        {
            toastService.ShowError("Not authorized to archive this URL");
        }
    }
}
