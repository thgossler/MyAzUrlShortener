@inherits LayoutComponentBase
@using AzUrlShortener.Core.Domain
@using AzUrlShortener.AdminUI
@using AzUrlShortener.AdminUI.Components
@using AzUrlShortener.AdminUI.Components.Dialogues
@using AzUrlShortener.AdminUI.Services
@using Microsoft.FluentUI.AspNetCore.Components

@rendermode InteractiveServer

<FluentStack Orientation="Orientation.Vertical" VerticalGapGap="10" Width="100%">
    <FluentLabel Typo="Typography.H6" Color="Color.FillInverse">Overall period</FluentLabel>
    <FluentStack Orientation="Orientation.Horizontal" HorizontalGap="10" Width="100%">
        <div Width="50%">
            <FluentDatePicker Label="Starting From" Value="@startDateTime.LocalDateTime" ValueChanged="@( e => StartDateTimeReconcile(e!.Value) )" />
            <FluentTimePicker Value="@startDateTime.LocalDateTime" ValueChanged="@( e => StartDateTimeReconcile(e!.Value) )" />
        </div>
        <div Width="50%">
            <FluentDatePicker Label="Ending at" Value="@endDateTime.LocalDateTime" ValueChanged="@( e => EndDateTimeReconcile(e!.Value) )" />
            <FluentTimePicker Value="@endDateTime.LocalDateTime" ValueChanged="@( e => EndDateTimeReconcile(e!.Value) )" />
        </div>
    </FluentStack>
    <div style="width: 100%;">
        <FluentTextField Label="Alternative URL" Name="AlternativeUrl" Placeholder="https://..." @bind-Value="schedule.AlternativeUrl" style="width: 90%;" />
    </div>
    <div>
        <FluentLabel Typo="Typography.H6" Color="Color.FillInverse" Style="margin-bottom: 8px">Recurrences within overall period</FluentLabel>
        <FluentStack Orientation="Orientation.Vertical" HorizontalGap="10">
            <FluentStack Orientation="Orientation.Horizontal" HorizontalGap="10">
                <FluentTextField Name="Cron" Label="Cron expression" Placeholder="* * * * *" @bind-Value="schedule.Cron" />
                <FluentButton Appearance="Appearance.Accent" OnClick="OpenCronDialog">Edit</FluentButton>
            </FluentStack>
            <p style="margin-left: 20px; font-style: italic">Cron helper tools:&nbsp;&nbsp;<a href="https://www.uptimia.com/cron-expression-generator" target="blank">Uptimia Cron Expression Generator</a>,&nbsp;&nbsp;<a href="https://crontab.guru/" target="blank">Crontab.guru</a></p>
        </FluentStack>

    </div>
    <div>
        <FluentNumberField Name="DurationMinutes" Label="Duration (in minutes)" @bind-Value="schedule.DurationMinutes" Min="0" Step="5" />
    </div>
</FluentStack>

@code {
    [Parameter]
    public Schedule schedule { get; set; } = new Schedule();

    private DateTimeOffset startDateTime;
    private DateTimeOffset endDateTime;

    private string? tempCronValue;
    private DialogParameters dialogParameters = default!;
    private IDialogReference? dialogReference;
    private IDialogService DialogService { get; set; } = default!;

    [Inject]
    private IDialogService _dialogService { get; set; } = default!;

    private enum DateTimeSection
    {
        Date,
        Time
    }

    protected override void OnInitialized()
    {
        startDateTime = schedule.Start;
        endDateTime = schedule.End;
        DialogService = _dialogService;
    }

    private void StartDateTimeReconcile(DateTime value)
    {
        var valueOffset = new DateTimeOffset(value);
        startDateTime = valueOffset;
        schedule.Start = startDateTime;
    }

    private void EndDateTimeReconcile(DateTime value)
    {
        var valueOffset = new DateTimeOffset(value);
        endDateTime = valueOffset;
        schedule.End = startDateTime;
    }

    private async Task OpenCronDialog()
    {
        // Store current value for potential cancel operation
        tempCronValue = schedule.Cron;

        // Configure dialog parameters
        dialogParameters = new DialogParameters
            {
                Title = "Edit Cron Expression",
                Width = "800px",
                PreventScroll = false,
                PrimaryAction = "OK",
                SecondaryAction = "Cancel",
                TrapFocus = true,
                Modal = true,
                PrimaryActionEnabled = true,
                SecondaryActionEnabled = true
            };

        try
        {
            await DialogService.UpdateDialogAsync<NewUrlDialog>("NewUrlDialog", new DialogParameters<NewUrlDialog>() { TrapFocus = false });
            await DialogService.UpdateDialogAsync<UpdateUrlDialog>("UpdateUrlDialog", new DialogParameters<UpdateUrlDialog>() { TrapFocus = false });
        }
        catch (Exception) {}

        // Open the dialog as a proper overlay
        dialogReference = await DialogService.ShowDialogAsync<CronEditorDialog>(
            new CronEditorDialogParameters
            {
                CronExpression = schedule.Cron,
                OnSave = SaveCronExpression
            }, 
            dialogParameters);

        // Handle dialog result
        var result = await dialogReference.Result;
        if (result.Cancelled)
        {
            // If cancelled, restore the original value
            schedule.Cron = tempCronValue;
        }

        try
        {
            await DialogService.UpdateDialogAsync<NewUrlDialog>("NewUrlDialog", new DialogParameters<NewUrlDialog>() { TrapFocus = true });
            await DialogService.UpdateDialogAsync<UpdateUrlDialog>("UpdateUrlDialog", new DialogParameters<UpdateUrlDialog>() { TrapFocus = true });
        }
        catch (Exception) { }
    }


    private void SaveCronExpression(string cronExpression)
    {
        schedule.Cron = cronExpression;
    }
}

