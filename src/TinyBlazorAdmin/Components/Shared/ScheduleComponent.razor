@inherits LayoutComponentBase
@using AzUrlShortener.Core.Domain
@using AzUrlShortener.TinyBlazorAdmin
@using AzUrlShortener.TinyBlazorAdmin.Components
@using AzUrlShortener.TinyBlazorAdmin.Services

@rendermode InteractiveServer

<FluentStack Orientation="Orientation.Vertical" VerticalGapGap="10" Width="100%">
    <FluentStack Orientation="Orientation.Horizontal" HorizontalGapGapGap="10" Width="100%">
        <div Width="50%">
            <FluentDatePicker Label="Starting From" Value="@startDateTime.LocalDateTime" ValueChanged="@( e => StartDateTimeReconcile(e!.Value) )" />
            <FluentTimePicker Value="@startDateTime.LocalDateTime" ValueChanged="@( e => StartDateTimeReconcile(e!.Value) )" />
        </div>
        <div Width="50%">
            <FluentDatePicker Label="Ending at" Value="@endDateTime.LocalDateTime" ValueChanged="@( e => EndDateTimeReconcile(e!.Value) )" />
            <FluentTimePicker Value="@endDateTime.LocalDateTime" ValueChanged="@( e => EndDateTimeReconcile(e!.Value) )" />
        </div>
    </FluentStack>  
    <div style="width: 100%;">
        <FluentTextField Label="Alternative URL" Name="AlternativeUrl" Placeholder="https://..." @bind-Value="schedule.AlternativeUrl" style="width: 90%;"/>
    </div>
    <div>
        <FluentStack Orientation="Orientation.Horizontal" HorizontalGapGapGap="10" >
            <FluentTextField Name="Cron" Label="Cron expression" Placeholder="* * * * *" @bind-Value="schedule.Cron" />
            <span>Tool: <a href="https://crontab.guru/" target="blank">https://crontab.guru/</a> </span>
        </FluentStack>

    </div>  
    <div>
        <FluentNumberField Name="DurationMinutes" Label="Duration (in minutes)" @bind-Value="schedule.DurationMinutes" Min="0" Step="5" />
    </div>  
</FluentStack> 


@code {
    [Parameter]
    public Schedule schedule { get; set; } = new Schedule();

    private DateTimeOffset startDateTime;
    private DateTimeOffset endDateTime;

    private enum DateTimeSection
    {
        Date,
        Time
    }

    protected override void OnInitialized()
    {
        startDateTime = schedule.Start;
        endDateTime = schedule.End;
    }
 
    private void StartDateTimeReconcile(DateTime value)
    {
        var valueOffset = new DateTimeOffset(value);
        startDateTime = valueOffset;
        schedule.Start = startDateTime;
    }

    private void EndDateTimeReconcile(DateTime value)
    {
        var valueOffset = new DateTimeOffset(value);
        endDateTime = valueOffset;
        schedule.End = startDateTime;
    }
}
